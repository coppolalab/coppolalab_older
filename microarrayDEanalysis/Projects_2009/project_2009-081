


library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)



Samples<-read.delim(file="targets.txt", header=T)



labls<- paste(Samples$Condition, Samples$SampleID,sep=”_”)

phD <- Samples[,c(1,4,6)]
rownames(phD)<-labls

metadata<-data.frame(labelDescription=c(“ArrayID”, “Condition”, “SampleID”), row.names= c(“ArrayID”, “Condition”, “SampleID”))

pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)


###reading the dataset  ##

illumina<- read.delim (file="2009-081 sample probe profile.txt", header=TRUE)

rownames(illumina)<-illumina$PROBE_ID
dim(illumina)
#[1] 22523   62

#as rat v1 new version is not available on repair, so here merge the data with old version
#of annotation, and use old probe names

illumina2<-illumina[!duplicated(illumina$SEARCH_KEY),]
dim(illumina2)


ill.array <- read.csv(file="RatRef_12_v1_11222119_A.csv", header=T)
dim(ill.array)


ill.nodup<-ill.array[!duplicated(ill.array$Search_key),]
dim(ill.nodup)


data<-merge(illumina2,ill.nodup, by.x=”SEARCH_KEY”, by.y=”Search_key”)
dim(data)



data1<-data[!duplicated(data$SEARCH_KEY),]
dim(data1)


data2<-data1[!duplicated(data1$Target),]


rownames(data2)<-data2$Target
dim(data2)


dat<-data2[,4:51]


#signal

#necessary columns only

nsampl<-12 

colnames(dat)[seq(1,(nsampl*4),4)]
 

mydata<-dat[,seq(1,(nsampl*4),4)]

colnames(mydata)<-labls

#detction scores p-value

colnames(dat)[seq(1,(nsampl*4),4)+1]
 

detsco.p<-dat[,seq(1,(nsampl*4),4)+1]

colnames(detsco.p)<-labls

detsco<-1-detsco.p #new version

colnames(detsco)<-labls


#getting the sds
colnames(dat)[seq(1,(nsampl*4),4)+2]

sds<-dat[,seq(1,(nsampl*4),4)+2]

colnames(sds)<-labls

#getting the bead no
colnames(dat)[seq(1,(nsampl*4),4)+3]

beads<-dat[,seq(1,(nsampl*4),4)+3]

colnames(beads)<-labls


mydata.notlog<-mydata

mydata=log2(mydata)
matriz <- as.matrix(mydata)



dim(mydata)





# signal plots-----------------------------

nsampl=12

condition<- as.vector(Samples$Condition)
 condition[Samples$Condition==”Sal_E18”]<-“lightgreen”
 condition[Samples$Condition==”Sal_P1”]<-“pink”
 condition[Samples$Condition==”LPS_E18”]<-“royalblue”
 condition[Samples$Condition==”LPS_P1”]<-“navy”



jpeg("1_signal.jpg", width=1800,height=1000)
par(cex.axis=0.7)
boxplot(as.data.frame(matriz),main="Signal Not normalized", col=condition,names=labls, las=3)
dev.off()

# signal distribution plots-
jpeg("1-signal_distribution.jpg", width=2000,height=1200)

par(mfrow=c(3,4))
for (k in 1:12){
   plot(density(mydata[,k]), main=paste(“signal distribution, array”, k, sep=”-“), cex=0.8)
}
dev.off()

jpeg("1-detsco-distribution.jpg", width=2000,height=1200)

par(mfrow=c(3,4))
for (k in 1:12){
   plot(density(detsco[,k]), main=paste(“detection scores, array”, k, sep=”-“), cex=0.8)
}
dev.off()


jpeg("1_detsco.jpg", width=1800,height=1000)

#detection scores
par(cex.axis=0.7)

boxplot(as.data.frame(detsco),main="Detection scores",names=labls, las=3)
abline(h=0.9, col=”red”)

dev.off()



#det_scores stats
jpeg("1_detsco%d.jpg", width=1300,height=800)
boxplot (as.data.frame(detsco))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-labls
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
write.xls(det.stats,file="detsco_stats.xls")


#set the thresholds here

ord<-read.delim(“ord.txt”, header=T)

detsco.ord<-detsco[,oo]

thresholds<-c(0.99,0.98,0.97,0.96)
pdf("1-detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata)
#grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Array)]))
#col<-as.character(as.numeric(Samples$strain))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

par(cex.axis=0.6)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
#legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Array)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()


#histogram

probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))

pdf("1-detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.5,0.1),labels= seq(0,50,10))
dev.off()


#No beads and sds info, so omit the following

jpeg("1_beads%d.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(as.data.frame(beads),main="Bead No",names=labls, las=3)
#bead average no
par(cex.axis=0.7)
boxplot(as.data.frame(sds),main="Bead SD",names=labls, las=3)
#bead standard deviation

#BEAD SD stats
par(cex.axis=1)
boxplot (as.data.frame(sds))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-labls
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
#write.xls(det.stats,file="beadSD_stats.xls")

dev.off()

thresholds<-c("mean","median")

pdf("beadSD_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in 1:2) {

apply(sds,2,thresholds[thr])->grn
grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Condition)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Condition)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
apply(log2(sds),2,thresholds[thr])->grn
grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Condition)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Log2 BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Condition)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)

}
dev.off()

jpeg("1_sds.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(log2(as.data.frame(sds)),main="Bead SD (log scale)",names=labls, las=3)
#bead standard deviation (log2)
dev.off()

jpeg("1_signal_detsco.jpg", width=1600,height=1000)

par (mfrow = c(3,4))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=labls[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 

dev.off()

# signal correlation plots [before normalization]--------------

matcor<-cor(matriz)

range(as.vector (matcor))


pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.2(matcor,trace="none",col=heat.colors(40),ColSideColors=condition, cexCol=0.8,cexRow=0.8, main=” Not normalized, Color coding - condition”,keysize=1)

dev.off()

clab<-cbind(batch,condition, time)
library(heatmap.plus)
pdf("2plus_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.plus(matcor,trace="none",col=heat.colors(40),ColSideColors=clab, cexCol=0.6,cexRow=0.6, main=”Not normalized”)

dev.off()


# signal correlation plots [from network preprocessing]--------------

pdf("2_AIC.pdf", width=13,height=10)
IAC=cor(matriz,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("All samples (no=",dim(IAC)[2],")"))
dev.off()

meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)

pdf("2_sd.pdf",width=12,height=12)
plot(numbersd, type="n", main=”number of standard deviation”) 
text(numbersd, labels=labls, cex=0.8,col="red")
abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()


# Outlier Exclusion--------------

removeSamples = match(c("DIST_891F_3m"), colnames(matriz))

matriz.g<-matriz[,-removeSamples]
phD.g<-phD[-removeSamples,]
pD.g<-pD[-removeSamples]
Samples.g<-Samples[-removeSamples,]
condition.g<-condition[-removeSamples]
labls.g<- labls[-removeSamples]
batch.g<- batch[-removeSamples]
detsco.g<- detsco[,-removeSamples]
time.g<- time[-removeSamples]

matcor.g<-cor(matriz.g)

range(as.vector (matcor.g))



pdf("2_corr_heatmap_notNorm_noOut.pdf", width=10,height=10)
heatmap.2(matcor.g,trace="none",col=heat.colors(40),ColSideColors=condition.g, RowSideColors=batch.g, cexCol=0.6,cexRow=0.6, main=”Not normalized, rm DIST_891F_3m \n Color coding - Columns: condition, Row: batch”, keysize=1)
dev.off()


rlab.g<-cbind(condition.g, time.g)
colnames(rlab.g)<-c(“condition”, “time”)

pdf("2plus_corr_heatmap_notNorm_noOutlier.pdf", width=10,height=10)
heatmap.plus(matcor.g,trace="none",col=heat.colors(40),RowSideColors=rlab.g, cexCol=0.6,cexRow=0.6, main=”Not normalized, rm DIST_891F_3m”)

dev.off()


pdf("2rm_AIC.pdf", width=13,height=10)
IAC=cor(matriz.g,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("All samples (no=",dim(IAC)[2],")"))
dev.off()

meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)


pdf("2rm_sd.pdf",width=12,height=12)
plot(numbersd, type="n", main=”number of standard deviation”) 
text(numbersd, labels=labls.g, cex=0.8,col="red")
abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()



# Between-arrays normalization--------------


matrizQ <-normalizeBetweenArrays(matriz,method="quantile")

jpeg("3_normalized.jpg", width=1300,height=800)
par(cex.axis=0.6)
boxplot(as.data.frame(matrizQ),main="Quantile normalization", col= condition,names=labls, las=3)
dev.off()


#after normalization array signal correlation

matcorN<-cor(matrizQ)
range(matcorN) 

pdf("3_corr_heatmap_Norm.pdf", width=10,height=10)
heatmap.2(matcorN,trace="none",col=heat.colors(40),ColSideColors= condition, cexCol=0.8, cexRow=0.8,main="Clustering after normalization, Color coding - condition", keysize=1)

dev.off()

pdf("3plus_corr_heatmap_notNorm_noOutlier.pdf", width=10,height=10)
heatmap.plus(matcorN,trace="none",col=heat.colors(40),ColSideColors=clab, cexCol=0.6,cexRow=0.6, main=”Clustering after normalization”)

dev.off()




# Creating the exprSet object--------------

eSet <- new("ExpressionSet", exprs=matrizQ, phenoData=pD)
eSet
ftdexp<-exprs(eSet)

---Array clustering based on gene variability-------------------

#functions based on the whole array have been deleted and are present in previous analyses. This because the dist function often produced 'Inf' values. 
#---------------------------------


standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}


rowMads <- apply(ftdexp, 1, mad)

#---top 1000 variable genes-------------------

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))


ftdcl2 <- hclust(ftddist2)
#ftdcl2$labels<-labls
ftddism2<-as.matrix(ftddist2)
#rownames(ftddism2)<-labls
#colnames(ftddism2)<-labls

#---top 500 variable genes-------------------
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

ftdcl3 <- hclust(ftddist3)
#ftdcl3$labels<-labls
ftddism3<-as.matrix(ftddist3)
#rownames(ftddism3)<-labls
#colnames(ftddism3)<-labls



#dendrograms
jpeg("4_clst_mostVariable_dendrogram.jpg", width=1300,height=800)

par (mfrow = c(1,2))
plot(ftdcl2, xlab="", sub="", main="Top 1000 most variable genes")
plot(ftdcl3, xlab="", sub="", main="Top 500 most variable genes")
dev.off()

#heatmaps
pdf("4_clst_heatmap_mostVariable.pdf", width=12,height=12)

heatmap.2(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 1000 Most Variable Genes, Color coding - condition”,trace="none", ColSideColors=condition, cexRow=0.9,cexCol=0.9, keysize=1)

heatmap.2(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 500 Most Variable Genes,Color coding - condition”,trace="none", ColSideColors=condition, cexRow=0.9,cexCol=0.9, keysize=1)
dev.off()

pdf("4plus_clst_heatmap_mostVariable.pdf", width=12,height=12)

heatmap.plus(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 1000 Most Variable Genes”,trace="none", ColSideColors=clab, cexRow=0.6,cexCol=0.6, keysize=1)

heatmap.plus(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 500 Most Variable Genes”,trace="none", ColSideColors=clab, cexRow=0.6,cexCol=0.6, keysize=1)
dev.off()

colnames(ftdexp2)
 

ord<-read.delim(”ord.txt”, header=T)
oo<-ord$Array
ftdexp1000<-ftdexp2[,oo]
ftdexp500<-ftdexp3[,oo]

condition1<-as.vector(ord$Condition)
condition1[ord$Condition==”Sal_E18”]<-“lightgreen”
 condition1[ord$Condition==”Sal_P1”]<-“pink”
 condition1[ord$Condition==”LPS_E18”]<-“royalblue”
 condition1[ord$Condition==”LPS_P1”]<-“navy”

pdf("3-expression_Heatmap.pdf", width=10,height=10)

heatmap.2(as.matrix(ftdexp1000), col=rev(heat.colors(52)), main="log2 transformed, normalized expression \n 1000 most variant probes/genes ", trace="none", dendrogram = "row", Colv=FALSE,  ColSideColors= condition1 ,keysize=1,cexCol=0.8,labRow=””)

heatmap.2(as.matrix(ftdexp500), col=rev(heat.colors(52)), main="log2 transformed, normalized expression \n 500 most variant probes/genes ", trace="none", dendrogram = "row", ColSideColors= condition1,Colv=FALSE,  keysize=1,cexCol=0.8, labRow=””)
dev.off()


# ************* Ratio  ************** ##
#all samples
all.samples<-as.data.frame(ftdexp)

#ratios for heatmap and ratio output
#selecting the coefficients for single arrays
#1. Controls, each condition as a control
all.contr.e18<-all.samples[,Samples$Condition==”Sal_E18”]
all.contrM.e18<-rowMeans(all.contr.e18)

all.contr.p1<-all.samples[,Samples$Condition==”Sal_P1”]
all.contrM.p1<-rowMeans(all.contr.p1)

#2. Exp, each condition as a treatment

all.exp.e18<-all.samples[,Samples$Condition==”LPS_E18”]
all.exp.p1<-all.samples[,Samples$Condition==”LPS_P1”]


#3. Ratios
all.coef.e18<- all.exp.e18 - all.contrM.e18
all.coef.p1<- all.exp.p1 - all.contrM.p1

#exporting all the data
mydata2<-cbind(rownames(all.coef.e18), all.coef.e18, all.coef.p1)

colnames(mydata2)[1]<-“Probe”


mydata3<-cbind(rownames(all.samples),all.samples)
colnames(mydata3)[1]<-"Probe"
colnames(mydata3)[2:length(mydata3)]<- paste(colnames(mydata3)[2:length(mydata3)],"exp",sep=".")

ratio_exp<-merge(mydata2, mydata3, by.x=”Probe”, by.y=”Probe”)



#-------------Contrast analysis ------



#linear fitting

TS<- Samples$Condition

TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)

colnames(design) <- levels(TS) 
colnames(design)


fit<- lmFit(eSet, design)
               
cont.anova <- makeContrasts(LPSvsSAL_E18 = LPS_E18 – Sal_E18,
                            LPSvsSAL_P1 = LPS_P1 – Sal_P1,
                            levels=design) 

fit2.anova<- contrasts.fit(fit, cont.anova)

#bayes
fitb<- eBayes(fit2.anova) 

#selecting the statistical cutoff

decide <- matrix(c("fdr",0.05, "fdr",0.1,"none",0.001,"none",0.005, “none”, 0.01),nrow=5,ncol=2,byr=T)

# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0

for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}

pdf("5_threshold_selection.pdf", width=13,height=6)

par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy

xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()


#chosen threshold: 

#select here the chosen paramaters
chosen.adjust<-"none"
chosen.p<-0.005
current.contrast<-"contrast"


results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))
#change p value and adjust method to get a reasonable gene list



#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf("5_selected contrast.pdf", width=10,height=10)

as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes @ p<0.005 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))

dev.off()


write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
dim(treat.de)


#output for contrasts

myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)

anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))

length(anovalist)



treat.de.anova<-treat.de[anovalist,]

fitsel.tre2<-merge(treat.de.anova, ill.nodup, by.x="ID",by.y="Target") 
colnames(fitsel.tre2)[1]<-"Probe"

fitsel.ratio<-merge(fitsel.tre2,ratio_exp, by.x=”Probe”, by.y=”Probe”)

myNames <-names(fitsel.ratio)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratio2<-cbind(
Probe= fitsel.ratio$Probe, 
Accession=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,coefs.col],
fitsel.ratio[,pvals.col],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,res.col],
fitsel.ratio[,ts.col],
A= fitsel.ratio$A,
fitsel.ratio[,25:42],
fitsel.ratio[,13:16],
fitsel.ratio[,19:21],
fitsel.ratio[,23:24]
)

dim(fitsel.ratio2)


fitsel.ratio2<-fitsel.ratio2[!duplicated(fitsel.ratio2$Probe),]
fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]

#out.file<-#paste(paste(current.contrast,chosen.adjust,chosen.p,sep="_"),"xls",sep=".")
write.xls(fitsel.ratio2, “significant_genelist_pLess005.xls”, quote=F)

pdf("6_anova_heatDiagram.pdf",width=12,height=8)
par(mfrow=c(1,2))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))

for (k in 1:2){
heatDiagram(results,fitb$coef, primary=k, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, mar=c(1.5,1.5,4.5,3.5))
}
dev.off()

pdf("6_hist_pvalue.pdf", height=8,width=15)
par(mfrow=c(1,2))
for (k in 1:2){
hist(fitb$p.value[,k], main=colnames(fitb$p.value)[k],xlab="p.value-distribution", br=80,col="blue")
}
dev.off()


#Venn

sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep=”-“)

pdf("6_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))

vennDiagram(results[,c(1:2)],names=c(v[1],v[2]),main=" p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1:2)], names=c(v[1],v[2]),main=" p<0.005", cex=1)

dev.off()


#heatmap 

pdf("7_anova_heatmap.pdf", height=12,width=12)

colU7<-c(rep(“tan”,4), rep(“gold4”,2))

coef.toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),c(16:21)]

heatmap.2(as.matrix(coef.toplot), col=rev(redgreen(48)), main=" p<0.005", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors=colU7, cexCol=0.9, keysize=1)
dev.off()




#complete list of genes

fitsel.treAll<-merge(treat.de, ill.nodup, by.x="ID",by.y="Target") 
colnames(fitsel.treAll)[1]<-"Probe"

fitsel.ratioAll<-merge(fitsel.treAll, ratio_exp, by.x=”Probe”, by.y=”Probe”)


myNames <-names(fitsel.ratioAll)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratioN<-cbind(
Probe= fitsel.ratioAll$Probe, 
Accession=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,coefs.col],
fitsel.ratioAll[,pvals.col],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,res.col],
fitsel.ratioAll[,ts.col],
A= fitsel.ratioAll$A,
fitsel.ratioAll[,25:42],
fitsel.ratioAll[,13:16],
fitsel.ratioAll[,19:21],
fitsel.ratioAll[,23:24]
)


dim(fitsel.ratioN)

fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
fitsel.ratioN<-fitsel.ratioN[!duplicated(fitsel.ratioN$Probe) ,]

write.xls(fitsel.ratioN,file= "complete_genelist.xls",quote=F)
