106Dose code (080907)

Study design
Illumina, Human v2
106 drug in different doses, i.e., 6 conditions(controlon, 1uM, 5uM, 10uM, 20uM, 50uM) on 5 patients. 24 arrays.

Interested in comparisons of drug effects, different doses vs control (?)

# Loading packages-------------------

library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)

my.analysis.dir<-("C:/Documents and Settings/Illumina/106Dose")
setwd(my.analysis.dir)

Samples<-read.delim(file="target.txt", header=T)

ROWlabels<- Samples$Sample 

phD <- Samples[,c(1, 3:4)]
rownames(phD)<-ROWlabels
   
CLabels<-list("Array", “sample”, “Condition”)
pD<-new("phenoData",pData=phD, varLabels=CLabels)
 
######################################
###reading the dataset  ##
#####################################

illumina<- read.csv(file="coppola-029_gene_profile.csv", skip=7,header=TRUE, row.name=1)
dim(illumina)



nsampl<-24
colnames(illumina)[seq(1,(nsampl*4),4)]
 
mydata<-illumina[,seq(1,(nsampl*4),4)]

colnames(mydata)<-ROWlabels
dim(mydata)

colnames(mydata)

#getting the detection scores
colnames(illumina)[seq(1,(nsampl*4),4)+3]
 
detsco<-illumina[,seq(1,(nsampl*4),4)+3]
colnames(detsco)<-ROWlabels

#getting the sds
colnames(illumina)[seq(1,(nsampl*4),4)+1]
sds<-illumina[,seq(1,(nsampl*4),4)+1]
colnames(sds)<-ROWlabels

#getting the bead no
colnames(illumina)[seq(1,(nsampl*4),4)+2]

beads<-illumina[,seq(1,(nsampl*4),4)+2]
colnames(beads)<-ROWlabels

mydata.raw<-mydata

mydata=log2(mydata)
matriz <- as.matrix(mydata)

# loading the illumina Human array library file------------------

ill.array <- read.csv(file="HumanRef-8_V2_11223162_B.csv", header=T)
dim(ill.array)

# signal plots--

nsampl=24
batch<-as.character(Samples$Batch)
status<- as.character(as.numeric(Samples$Condition))

jpeg((paste(my.res.dir, "1_signal%d.jpg",sep="")),width=1300,height=800)
boxplot(as.data.frame(matriz),main="Signal, Not normalized",col= batch,names=(1:nsampl), xaxt="n")
axis(1,at=1:nsampl,las=2)
legend(x="topright",legend=unique(Samples$Batch),fill=unique(batch),cex=0.8,bty="n"
boxplot(as.data.frame(matriz),main="Signal, Not normalized",col= status,names=(1:nsampl), xaxt="n")
axis(1,at=1:nsampl,las=2)
legend(x="topright",legend=unique(Samples$Condition),fill=unique(status),cex=0.8,bty="n")
#color coding by condition
#detection scores
boxplot(as.data.frame(detsco),main="Detection scores",names=1:nsampl)
#det_scores stats
boxplot(as.data.frame(detsco))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-Samples$Array
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
write.xls(det.stats,file="detsco_stats.xls")

#set the thresholds here

thresholds<-c(0.99,0.98,0.97,0.96)
pdf("detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata) 
#grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Array)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Array)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()


probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))

pdf("detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.4,0.1),labels= seq(0,40,10))
dev.off()


jpeg((paste(my.res.dir, "1_bead%d.jpg",sep="")),width=1300,height=800)
boxplot(as.data.frame(beads),main="Bead No",names=1:nsampl)
#bead average no
boxplot(as.data.frame(sds),main="Bead SD",names=1:nsampl)
#bead standard deviation
#BEAD SD stats
boxplot (as.data.frame(sds))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-Samples$Array
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
write.xls(det.stats,file="beadSD_stats.xls")
dev.off()

thresholds<-c("mean","median")

pdf("beadSD_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in 1:2) {

apply(sds,2,thresholds[thr])->grn
#grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Array)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Array)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
apply(log2(sds),2,thresholds[thr])->grn
grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Array)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Log2 BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Array)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()

jpeg((paste(my.res.dir, "1_others%d.jpg",sep="")),width=1300,height=800)
boxplot(log2(as.data.frame(sds)),main="Bead SD (log scale)",names=1:nsampl)
#bead standard deviation (log2)

matriq<-2^matriz
sds.corr<- sds/matriq

par (mfrow = c(2,4))
for(k in 1:nsampl)
plot(x=matriz[,k], y=sds.corr[,k],cex=0.4, main=ROWlabels[k],xlab="log2 signal",ylab="CV",ylim=c(0,0.14))
#log2 signal vs. coefficient of variation(SD/mean)

par (mfrow = c(2,4))
for(k in 1:nsampl)
plot(x=matriz[,k], y=(log2(sds.corr[,k])),cex=0.4, main=ROWlabels[k],xlab="log2 signal",ylab="log2(CV)")
#log2 signal vs. log coefficient of variation(SD/mean)

par (mfrow = c(2,4))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=ROWlabels[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 
dev.off()

# signal correlation plots [before normalization]------

matcor<-cor(matriz)

range(as.vector(matcor))

pdf((paste(my.res.dir, "2_corr_heatmap_notNorm.pdf",sep="")),width=10,height=10)
heatmap.2(matcor,trace="none",col=heat.colors(40),ColSideColors=batch, RowSideColors=status,cexCol=1,cexRow=1 ,sub="Color coding - Columns:batch, Row: condition",cex.sub=2, main=”Clustering Based on Inter-Array Pearson Coefficient, Not normalized”)
#to visualize it
dev.off()

jpeg((paste(my.res.dir, "2_corr_notNorm%d.jpg",sep="")),width=1300,height=800)

par (mfrow = c(4,6))
for(k in 1:3)
{
for(j in (k+1):nsampl)
{
options(digits=3)
cor.test(matriz[,k],matriz[,j])->pear
pear<-format(pear$estimate,digits=4)
plot(matriz[,k],matriz[,j],xlab=ROWlabels[k],main=paste(ROWlabels[k],ROWlabels[j],sep="-"));mtext(pear, side=1,line=-1,col=2,cex=1.1)
}
}
dev.off()


# signal correlation plots [from network preprocessing]--------------

IAC=cor(matriz,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1,main="All samples (16)")

meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)

#this is the mean IAC, after excluding the diagonal
datout=data.frame(rbind(IAC,meanIAC,numbersd))write.table(datout,file="IACs_unnormalized.csv",row.names=T,col.names=T,sep=",")

plot(numbersd)
identify(numbersd, col=3, cex=1)
abline(h=-2, col=4)
abline(h=-3, col=5)
 
SDo<-as.data.frame(cbind(Array=(1:length(numbersd)),Name=names(numbersd),SD=(numbersd)))
SDo[,3]<-as.numeric(as.character(SDo[,3]))
SDo<-SDo[order(SDo[,3]),]
SDoOut<-SDo[SDo[,3]<=(-2),]
           
# Outlier Exclusion--------------

# There is 1 possible outlier for this data
to.exclude<-c(24)
matriz_good<-matriz[,-to.exclude]
batch<-batch[-to.exclude]
status<-status[-to.exclude]
ROWlabels<-ROWlabels[-to.exclude]
pD<-pD[-to.exclude]
phD<-phD[-to.exclude,]
Samples<-Samples[-to.exclude,]

#after removing outliers

matcor<-cor(matriz_good)
range(as.vector(matcor))


pdf((paste(my.res.dir, "2_corr_heat_NotNorm_noOutlier(#24).pdf",sep="")),width=10,height=10)
heatmap.2(matcor,trace="none",col=heat.colors(40),ColSideColors=batch, RowSideColors=status, cexCol=1,cexRow=1 ,sub="Color coding - Columns: batch, Row:Condition",cex.sub=2,main="Clustering Based on Inter-Array Pearson Coefficient Not normalized, no Outlier(#24)", cex=0.8)
dev.off()

#Any additional outlier? 
IAC1=cor(matriz_good,use="p")
cluster1=hclust(as.dist(1-IAC1))
meanIAC=apply(IAC1,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)
plot(numbersd)
identify(numbersd, col=3, cex=1)
abline(h=-2, col=4)
abline(h=-3, col=5)

SDo<-as.data.frame(cbind(Array=(1:length(numbersd)),Name=names(numbersd),SD=(numbersd)))
SDo[,3]<-as.numeric(as.character(SDo[,3]))
SDo<-SDo[order(SDo[,3]),]
SDoOut<-SDo[SDo[,3]<=(-2),]
     
# No additional Outlier Exclusion 

matrizQ<-normalizeBetweenArrays(matriz,method="quantile") #with outlier
matrizQQ<-normalizeBetweenArrays(matriz_good,method="quantile") #without outlier

jpeg((paste(my.res.dir, "3_normalized_noOutlier.jpg",sep="")),width=1300,height=800)
boxplot(as.data.frame(matrizQQ),main="Quantile normalization", col= batch, names=Samples$Array) 
dev.off()

#after normalization array signal correlation
matcorNw<-cor(matrizQ)
range(matcorNw) 

matcorN<-cor(matrizQQ)
range(matcorN)  

pdf((paste(my.res.dir, "2_corr_heatmap_Norm_noOutlier.pdf",sep="")),width=10,height=10)
heatmap.2(matcorN,trace="none",col=heat.colors(40),ColSideColors=batch, RowSideColors=status,cexCol=1,cexRow=1 ,sub="Color coding - Columns:batch, Row:Condition",cex.sub=2,main="Clustering Based on Inter-Array Pearson Coefficient, after normalization no outlier")
dev.off()


# Creating the exprSet object--------------
eSet <- new("exprSet", exprs=matrizQQ, phenoData=pD)
eSet 
Expression Set (exprSet) with 
       
ftdexp<-exprs(eSet)

#---Array clustering based on gene variability-------------------
labls<-ROWlabels

standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}

rowMads <- apply(ftdexp, 1, mad)

#---top 1000 variable genes--

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))

ftdcl2 <- hclust(ftddist2)
labls<-ftdcl2$labels
ftddism2<-as.matrix(ftddist2)

#---top 500 variable genes-------------------
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

ftdcl3 <- hclust(ftddist3)
labls<-ftdcl3$labels
ftddism3<-as.matrix(ftddist3)

#dendrograms
jpeg((paste(my.res.dir, "4_clst_mostVariable_dendrogram%d.jpg",sep="")), width=1300,height=800)
par (mfrow = c(1,1))
plot(ftdcl2, xlab="", sub="", main="Top 1000 variable genes")
plot(ftdcl3, xlab="", sub="", main="Top 500 variable genes")
dev.off()

#heatmaps

pdf((paste(my.res.dir, "4_clst_heatmap_mostVariable.pdf",sep="")),width=12,height=12)
heatmap.2(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Array Clustering Based on the Top 1000 Most Variable Genes",trace="none",ColSideColors=batch,cexRow=1,cexCol=1,RowSideColors=status,sub="Color coding - Columns:batch, Rows:condition",cex.sub=2)
#the more red, the more distant. 
heatmap.2(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main=" Array Clustering Based on the Top 500 Most Variable Genes",trace="none",ColSideColors=batch,cexRow=1,cexCol=1,RowSideColors=status, sub="Color coding - Columns:batch, Rows:condition",cex.sub=2)
dev.off()

#---MDS---

cm1 <- cmdscale(ftddist2, eig=TRUE)
par(mfrow=c(1,1))
myPlot <- function(x, ...)
  plot(x$points, xlab="Component 1", ylab="Component 2", pch=19, ...)
#check the colors in the above command

pdf((paste(my.res.dir, "4_mds.pdf",sep="")),width=10,height=10)
myPlot(cm1, main="MDS plot")
chw <- par()$cxy[1]
text(x=cm1$points[,1]+(0.3*chw),y=cm1$points[,2],labels=labls,adj=0)
dev.off()

## *****Ratio  

#all samples
all.samples<-as.data.frame(ftdexp)

#ratios for heatmap and ratio output
#selecting the coefficients for single arrays
#1. Controls
all.contr<-all.samples[,Samples$Condition==”cntr”]
all.contrM<-rowMeans(all.contr)

#2. Exp

all.exp.1u<-all.samples[,Samples$Condition==”1uM”]
all.exp.5u<-all.samples[,Samples$Condition==”5uM”]
all.exp.10u<-all.samples[,Samples$Condition==”10uM”]
all.exp.20u<-all.samples[,Samples$Condition==”20uM”]
all.exp.50u<-all.samples[,Samples$Condition==”50uM”]

#3. Ratios
all.coef.1u <-all.exp.1u-all.contrM
all.coef.5u <-all.exp.5u-all.contrM
all.coef.10u <-all.exp.10u-all.contrM
all.coef.20u <-all.exp.20u-all.contrM
all.coef.50u <-all.exp.50u-all.contrM

#put the ratio together
mydata2<-cbind(rownames(all.samples), all.coef.1u, all.coef.5u, all.coef.10u, all.coef.20u, all.coef.50u)
colnames(mydata2)[1]<-"Target"

ill.array.nodup<-ill.array[!duplicated(ill.array$Target),]
dim(ill.array.nodup)


my.all.data<- merge(mydata2,ill.array.nodup,by.x="Target",by.y="Target")
dim(my.all.data)


colnames(my.all.data)
 

mydata_allsample<-cbind(rownames(all.samples),all.samples)
colnames(mydata_allsample)[1]<-"Target"
colnames(mydata_allsample)[2:length(mydata_allsample)]<-paste(as.character(ROWlabels),"e",sep=".")

my.all.data_new<-merge(my.all.data,mydata_allsample,by.x="Target",by.y="Target")


###########################################################
#-------------Contrast analysis ------
###########################################################

#linear fitting
TS<- paste(“ds”,Samples$Condition, sep=”.”)
TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)

colnames(design) <- levels(TS) 
colnames(design)

cont.anova <- makeContrasts(DS1uM= ds.1uM – ds.cntr,
                            DS5uM= ds.5uM – ds.cntr,
					                 	DS10uM= ds.10uM – ds.cntr,
                            DS20uM= ds.20uM – ds.cntr,
                            DS50uM= ds.50uM – ds.cntr,
                            levels=design) 

fit2.anova <- contrasts.fit(fit, cont.anova)
names(fit2.anova)

              
#bayes
fitb<- eBayes(fit2.anova) 

#selecting the statistical cutoff
decide <- matrix(c("fdr",0.01,
"fdr",0.05,"none",0.001,"none",0.005, “none”, 0.01),nrow=5,ncol=2,byr=T)

# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0

for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}

pdf((paste(my.res.dir, "5_threshold_selection.pdf",sep="")),width=13,height=6)
par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy

xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()

#p-value distribution---------------
jpeg((paste(my.res.dir, "5_pDistribution%d.jpg",sep="")),width=1000,height=1000)
hist(fitb$p.value[,1], main=colnames(fitb$p.value)[1],xlab="p.value-distribution – global analysis", br=80,col="blue")
hist(fitb$p.value[,2], main=colnames(fitb$p.value)[2],xlab="p.value-distribution – global analysis", br=80,col="blue")
hist(fitb$p.value[,3], main=colnames(fitb$p.value)[3],xlab="p.value-distribution – global analysis", br=80,col="blue")
hist(fitb$p.value[,4], main=colnames(fitb$p.value)[4],xlab="p.value-distribution – global analysis", br=80,col="blue")
hist(fitb$p.value[,5], main=colnames(fitb$p.value)[5],xlab="p.value-distribution – global analysis", br=80,col="blue")
dev.off()

#chosen threshold: 

#select here the chosen paramaters
chosen.adjust<-"fdr"
chosen.p<-0.01
current.contrast<-"contrast"

results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))

#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf((paste(my.res.dir, "5_selected contrast.pdf",sep="")),width=10,height=10)
as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes @ fdr 1% (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))
dev.off()


write.fit(fitb,file="genelists/dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="genelists/dummy.xls",head=T)

myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)

anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))
length(anovalist)

treat.de.anova<-treat.de[anovalist,]

fitsel.tre2<-merge(treat.de.anova, ill.array, by.x="ID",by.y="Target") 
colnames(fitsel.tre2)[1]<-"Target"

fitsel.ratio<-merge(fitsel.tre2,mydata2)

endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 

fitsel.ratio2<-cbind(
Target= fitsel.ratio$Target, 
Transcript=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,3:7],
Aval=fitsel.ratio[,2],

fitsel.ratio[,13:17],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,20:24],
fitsel.ratio[,8:12],
ProbeSequence=fitsel.ratio$Probe_Sequence,
Ontology=fitsel.ratio$Ontology,
Synonym=fitsel.ratio$Synonym,
fitsel.ratio[,endcolumns.start:endcolumns.end]
)


fitsel.ratio2<-fitsel.ratio2[!duplicated(fitsel.ratio2$Target),]
dim(fitsel.ratio2)

fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]

out.file<-paste(paste(current.contrast,chosen.adjust,chosen.p,sep="_"),"xls",sep=".")
write.xls(fitsel.ratio2,file=paste("genelists/",out.file,sep=""),quote=F)

#pull out gene list for overlap and Union

overlap5<-fitsel.ratio2[fitsel.ratio2[,18]!=0 & fitsel.ratio2[,19]!=0 & fitsel.ratio2[,20]!=0 & fitsel.ratio2[,21]!=0 & fitsel.ratio2[,22]!=0,] 
overlap5<- overlap5[, c(1:4, 5:9, 18:22, 28:30)]
write.table(overlap5, “Overlap for different doses.csv”, sep=”,”, row.names=F)


#Venn
pdf((paste(my.res.dir, "6_venn%d.pdf",sep="")),width=10,height=10)
DS1u<-paste("1uM",summary(results)[1,1]+summary(results)[3,1],sep="-")
DS5u<-paste("5uM",summary(results)[1,2]+summary(results)[3,2],sep="-")
DS10u<-paste("10uM",summary(results)[1,3]+summary(results)[3,3],sep="-")
DS20u<-paste("20uM",summary(results)[1,4]+summary(results)[3,4],sep="-")
DS50u<-paste("50uM",summary(results)[1,5]+summary(results)[3,5],sep="-")
vennDiagram(results[,c(1:3)],names=c(DS1u, DS5u, DS10u),main="1uM, 5uM, 10uM effect @ fdr 1%", include=c("up","down"),counts.col=c(2,3))
vennDiagram(results[,c(2:4)],names=c(DS5u, DS10u, DS20u),main="5uM, 10uM, 20uM effect @ fdr 1%", include=c("up","down"),counts.col=c(2,3))
vennDiagram(results[,c(3:5)],names=c(DS10u, DS20u, DS50u),main="10uM, 20uM, 50uM effect @ fdr 1%", include=c("up","down"),counts.col=c(2,3))
dev.off()

#heatmap 
coef.toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),31:49]
toplot<-coef.toplot[1:1000,]

pdf((paste(my.res.dir, "7_anova_heat_all.pdf",sep="")),height=8,width=8)
heatmap.2(as.matrix(toplot), col=rev(redgreen(52)), main="Dose effect", trace="none",cexCol=0.5, cexRow=0.5, breaks=(c(-4,-3.5,-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3,3.5,4)))
dev.off()

d1u<- fitsel.ratio2[fitsel.ratio2[,18]!=0,]
d5u<- fitsel.ratio2[fitsel.ratio2[,19]!=0,]
d10u<- fitsel.ratio2[fitsel.ratio2[,20]!=0,]
d20u<- fitsel.ratio2[fitsel.ratio2[,21]!=0,]
d50u<- fitsel.ratio2[fitsel.ratio2[,22]!=0,]

d1u_symbol<-substr(d1u$Transcript, 1,9)
d5u_symbol<-substr(d5u$Transcript, 1,9)
d10u_symbol<-substr(d10u$Transcript, 1,9)
d20u_symbol<-substr(d20u$Transcript, 1,9)
d50u_symbol<-substr(d50u$Transcript, 1,9)

write.table(d1u_symbol, “d1u_symbol.csv”, sep=”,”)
write.table(d5u_symbol, “d5u_symbol.csv”, sep=”,”)
write.table(d10u_symbol, “d10u_symbol.csv”, sep=”,”)
write.table(d20u_symbol, “d20u_symbol.csv”, sep=”,”)
write.table(d50u_symbol, “d50u_symbol.csv”, sep=”,”)


#complete list of genes

fitsel.treAll<-merge(treat.de, ill.array, by.x="ID",by.y="Target") 
colnames(fitsel.treAll)[1]<-"Target"
fitsel.ratioAll<-merge(fitsel.treAll,mydata2)
endcolumns.start<-length(fitsel.ratioAll)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratioAll)

fitsel.ratioN<-cbind(
Target= fitsel.ratioAll$Target, 
Transcript=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,3:7],
Aval=fitsel.ratioAll[,2],

fitsel.ratioAll[,13:17],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,20:24],
fitsel.ratioAll[,8:12],
ProbeSequence=fitsel.ratioAll$Probe_Sequence,
Ontology=fitsel.ratioAll$Ontology,
Synonym=fitsel.ratioAll$Synonym,
fitsel.ratioAll[,endcolumns.start:endcolumns.end]
)


fitsel.ratioN<-fitsel.ratioN[!duplicated(fitsel.ratioN$Target),]
fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
write.xls(fitsel.ratioN,file=paste("genelists","genelist_all.xls",sep="/"),quote=F)



