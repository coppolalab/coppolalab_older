**Tusznski/CST – Affy, mouse4320, 24 arrays**
07/23/2008, updated 07/25/2008, 24 arrays,.
we want to compare lesion at day 1 and at day 7 vs. sham, in the four  
classes (CST_IP, CST_UB, RST_IP, RST_UB).
we are interested in genes that change in IP, but not in UB.
We have duplicates for each condition


# Loading packages-------------------

library (Biobase)
library(marray)
library (limma)
library (affy)
library(simpleaffy)
library(affyPLM)
library(RColorBrewer)
library(gcrma)
library(MASS)
library(gplots)
library(annaffy)

# setting the work directories------------

my.analysis.dir<-("C:/Documents and Settings/Study/CST")
setwd(my.analysis.dir)

# Loading the workspace------------------

# Reading the data in[skip if loaded]-------

targets<-readTargets(file="targets_new.txt")

#read in data

dat<- ReadAffy(filenames= targets$FileName, verbose=TRUE)
dat


# DATA EXPLORATION------------------------

narrays<-24
dat.exp<-exprs(dat)
dat.exp2<-log2(as.data.frame(dat.exp))

# signal plots---
# boxplots----

labls = targets$SampleName
condition=as.numeric(as.factor(targets$Condition)) +4
status=as.numeric(as.factor(targets$Status)) +5
day<-targets$Day

jpeg("1_signal.jpg”, width=1200,height=800)

colnames(dat.exp2)<-labls
par(cex.axis=0.7)
boxplot(dat.exp2,col=status, main="Log2 - Not normalized data", names=labls, las=3)
dev.off()

# signal distribution plots-
jpeg("1-signal_distribution.jpg”, width=1500,height=1000)
par(mfrow=c(4,6))
for (k in 1:narrays){
   plot(density(dat.exp2[,k]), main=paste(“distribution, array”, k, sep=”-“))
}
dev.off()


# simpleaffy quality control—
qc.dat<-qc(dat)

pdf("1_quality.pdf" ,width=13,height=8)

par (mfrow = c(1,3))
par(cex.axis=0.8)
#Average Background (should be comparable)
barplot(avbg(qc.dat),col=status, main="Average Background", names=labls, las=3, cex.axis=0.8)
#Scale factors(should be within 3-fold)
par(cex.axis=0.8)
barplot(sfs(qc.dat),col=status, main="Scale Factors", names=labls,las=3, cex.axis=0.8)
#Percent present(should be similar, look for very low values)
par(cex.axis=0.8)
barplot(percent.present(qc.dat),col=status, main="Percent Present Calls", names=labls, las=3,ylim=c(0,100), cex.axis=0.8)
dev.off()


# RNA degradation plots

RNAdeg<-AffyRNAdeg(dat)
#intensive!
par (mfrow = c(1,1))

pdf("1_signal_deg.pdf",width=13,height=8)

plotAffyRNAdeg(RNAdeg, col=status)
dev.off()
summaryAffyRNAdeg(RNAdeg)

# affyPLM (probe level models) quality controls------------

Pset<-fitPLM(dat)
#very intensive!

# PLM does background correction and normalization like RMA, but using rlm from the MASS package. You can have 
#1) false chip images with raw intensities, weights, residuals and sign of the residuals  [skipped]
#2) Relative Log Expression plot 

pdf("2_signal_qc.pdf", width=13,height=8)
par (mfrow = c(2,1))
par(cex.axis=0.7)
Mbox(Pset,ylim=c(-1,1),col=status,names=labls, las=3,main="Relative Log Expression Plot", cex=0.7)
#3) Normalized Unscaled Standard Error (NUSE) plot
par(cex.axis=0.7)
boxplot(Pset,col=status,names=labls, las=3,main=" Normalized Unscaled Standard Error (NUSE) plot",outline=FALSE)
dev.off()

# background correction-----------------------------

dat.bgc<-bg.correct(dat,method="rma")
dat.bgc
 
dat.bgc.exp<-exprs(dat.bgc)

dat.bgc.exp2<-log2(as.data.frame(dat.bgc.exp))

jpeg("3_bgc.jpg”, width=1200,height=800)
par(cex.axis=0.7)
boxplot(dat.bgc.exp2,col=status, main="Log2 - Not normalized data -RMA background correction",names=labls, las=3)
dev.off()

rm(Pset, qc.dat, RNAdeg, dat.bgc,dat.bgc.exp,dat.bgc.exp2)

# normalization and summarization (RMA)-----
rawdat.rma<-rma(dat)


dat.rma.exp<-exprs(rawdat.rma)
colnames(dat.rma.exp)<-labls
dat.rma.exp2<-as.data.frame(dat.rma.exp)

jpeg("4_rma_norm.jpg", width=1200,height=800)
par(cex.axis=0.7)
boxplot(dat.rma.exp2,col=status, main="Log2 - RMA normalization", names=labls, las=3)
dev.off()

# MA plots-----------------------------
bitmap("4_maplots%d.jpg", width=1300,height=800)
par (mfrow = c(3,5))

MAplot(dat.rma, cex=1.2,ylim=c(-6,3))
dev.off()


bitmap((paste(my.res.dir, "4_rma_sample%d.jpg",sep="")),width=1300,height=800)

par (mfrow = c(4,4))
for(k in c(3,4))
{
for(j in (k+1):narrays)
{
options(digits=3)
cor.test(dat.rma.exp[,k],dat.rma.exp[,j])->pear
pear<-pear$estimate^2
pear<-format(pear,digits=4)
plot(dat.rma.exp[,k],dat.rma.exp[,j], xlab=targets$FileName[k], ylab=targets$FileName[j],main= paste(targets$Condition[k],targets$Replicate[j], sep="-"));mtext(paste("R^2: ",pear,sep=""), side=1,line=-1,col=2,cex=1.1)
}
}
dev.off()

#expression heatmap

standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}

rowMads <- apply(dat.rma.exp, 1, mad)

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
exp1000 <- dat.rma.exp[top1000, ]
exp1000<-exp1000[,c(1:3, 13:14,12, 4:6,16,15,18, 7:8,17, 19:21, 10:11,9,22:24)]

rowMads <- apply(dat.rma.exp, 1, mad)
ord <- order(rowMads,decreasing=TRUE)
top500 <- ord[1:500]
exp500 <- dat.rma.exp[top500, ]
exp500<-exp500[,c(1:3, 13:14,12, 4:6,16,15,18, 7:8,17, 19:21, 10:11,9,22:24)]


pdf("3_expression_Heatmap.pdf", width=12,height=12)
heatmap.2(as.matrix(exp1000), col=rev(redgreen(52)), main="log2 transformed, normalized expression \n 1000 most variant probes/genes ", trace="none", dendrogram = "row", Colv=FALSE,  keysize=1,cexCol=0.8)
heatmap.2(as.matrix(exp500), col=rev(redgreen(52)), main="log2 transformed, normalized expression \n 500 most variant probes/genes ", trace="none", dendrogram = "row", Colv=FALSE,  keysize=1,cexCol=0.8)
dev.off()

# Correlation matrix------------------------
matriz<-as.matrix(dat.rma.exp2)
matcor<-cor(as.matrix(dat.rma.exp2))

pdf("5_corr_heatmap_norm.pdf",width=10,height=10)
heatmap.2(matcor, col=heat.colors(75), main="Normalized, Clustering Based on Pearson correlation \n colorcoding – column: treatment, Row: Immuno-precipitated”, trace="none" , RowSideColors=as.character(condition), ColSideColors=as.character(status), cexRow=0.8,cexCol=0.8)
#the more red, the more distant. 
dev.off()


##Array clustering based on gene variability---


ftdexp<-matriz
standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}

rowMads <- apply(ftdexp, 1, mad)

#---top 1000 variable genes-------------------

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))

ftdcl2 <- hclust(ftddist2)
ftdcl2$labels<-labls
ftddism2<-as.matrix(ftddist2)
#rownames(ftddism2)<-labls
#colnames(ftddism2)<-labls

#---top 500 variable genes-------------------
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

summary(ftddist3)
  
ftdcl3 <- hclust(ftddist3)
ftdcl3$labels<-labls
ftddism3<-as.matrix(ftddist3)

#dendrograms

jpeg("6_clst_dendrogram_MostVariabl.jpg", width=1500,height=1000)
par (mfrow = c(1,2))
plot(ftdcl2, xlab="", sub="", main="cluster based on top 1000 variable genes")
plot(ftdcl3, xlab="", sub="", main="cluster based on top 500 variable genes ")
dev.off()


#heatmaps
pdf("6_clst_heatmap_MostVariabl.pdf",width=10,height=10)
heatmap.2(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Array Clustering Based on the Top 1000 Most Variable Genes \n Color coding - column: treatment, Row: Immuno-precipitated",trace="none", RowSideColors=as.character(condition), ColSideColors=as.character(status), cexCol=0.8, cexRow=0.8)
heatmap.2(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Array Clustering Based on the Top 500 Most Variable Genes \n Color coding - column: treatment, Row: Immuno-precipitated",trace="none", RowSideColors=as.character(condition), ColSideColors=as.character(status), cexCol=0.8, cexRow=0.8)
dev.off()

#---MDS-

cm1 <- cmdscale(ftddist2, eig=TRUE)
samm1 <- sammon(ftddist2, trace=FALSE)
fact.col[fact.col==0]<-1

par(mfrow=c(1,1))
myPlot <- function(x, ...)
  plot(x$points, xlab="Component 1", ylab="Component 2", pch=19, ...)
#check the colors in the above command
pdf("6_MDS.pdf", width=10,height=10)
myPlot(cm1, main="quantile")
chw <- par()$cxy[1]
text(x=cm1$points[,1]+(0.3*chw),y=cm1$points[,2],labels=labls,adj=0)
dev.off()


#---LIMMA analysis-------------------
#Annaffy---------------------------

probeids<- featureNames(rawdat.rma)
#download annotation file from Affymetrix web
symbols <- aafSymbol(probeids, "mouse4302")
descrp<- aafDescription(probeids, "mouse4302")
#gonto<-aafGO(probeids, "mouse4302")

getText(symbols)->symblist
getText(descrp)->descrlist
dat.ann<-cbind(probeids,symblist,descrlist)


#dat.ann<-read.csv("dat.ann.csv", header=T)

#---Contrast analysis-------------------

phD <-targets[,c(1, 3,4,5,6,7)]
rownames(phD)<-labls

metadata<-data.frame(labelDescription=c(“Array”, “Region”, “Condition”, “day”, “Status”, “SampleName”), row.names= c(“Array”, “Region”, “Condition”, “day”, “Status”, “SampleName”))
pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)
eSet <- new("ExpressionSet", exprs=as.matrix(dat.rma.exp2), phenoData=pD)


TX<- paste(targets$Region,targets$Status, targets$Condition, targets$Day, sep=”.”)
#gets all the possible combinations
TX <- factor(TX, levels=unique(TX)) 
design <- model.matrix(~0+TX) 
colnames(design) <- levels(TX) 

fit <- lmFit(eSet, design) 

#linear fitting
contr<- makeContrasts(CST.IP.1 = Ctx.CST.IP.1 – Ctx.sham.IP.7,
                      CST.IP.7 = Ctx.CST.IP.7 – Ctx.sham.IP.7,
                      RST.IP.1 = BS.RST.IP.1 – BS.sham.IP.7,
                      RST.IP.7 = BS.RST.IP.7 – BS.sham.IP.7,
                      CST.UB.1 = Ctx.CST.UB.1 – Ctx.sham.UB.7,
                      CST.UB.7 = Ctx.CST.UB.7 – Ctx.sham.UB.7,
                      RST.UB.1 = BS.RST.UB.1 – BS.sham.UB.7,
                      RST.UB.7 = BS.RST.UB.7 – BS.sham.UB.7,
                   levels=design)
                     

fit2 <- contrasts.fit(fit, contr) 
fitb <- eBayes(fit2) 

#selecting the statistical cutoff
decide <- matrix(c("fdr",0.01, "fdr",0.05, "fdr",0.1,
"none",0.001,"none",0.005, “none”, 0.01),nrow=6,ncol=2,byr=T)

# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0

for (test in 1:nrow(decide)){

    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]

   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))

   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}


pdf("7_threshold_selection.pdf",width=13,height=8)
par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{

as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy

xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()


#chosen threshold: none with p<0.05

#select here the chosen paramaters
chosen.adjust<-"none"
chosen.p<-0.005
current.contrast<-"contrast"

#options(digits=3)
results <-decideTests(fitb, adjust.method=chosen.adjust, p=as.numeric(chosen.p))
summary(results)

#plot selected
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf("7_selected contrast.pdf", width=10,height=10)
as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)
barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes @ p<0.005 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))

dev.off()

#added heatDiagram
pdf("11_anova_heatDiagram.pdf",width=15,height=10)
par(mfrow=c(2,4))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))
heatDiagram(results,fitb$coef, primary=1, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”CST.IP.1”)
heatDiagram(results,fitb$coef, primary=2, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”CST.IP.7”)
heatDiagram(results,fitb$coef, primary=3, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”RST.IP.1”)
heatDiagram(results,fitb$coef, primary=4, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”RST.IP.7”)
heatDiagram(results,fitb$coef, primary=5, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”CST.UB.1”)
heatDiagram(results,fitb$coef, primary=6, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”CST.UB.7”)
heatDiagram(results,fitb$coef, primary=7, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”RST.UB.1”)
heatDiagram(results,fitb$coef, primary=8, cex=0.5, orientation="landscape", low="green",high="red", ncolors=123, main=”RST.UB.7”)
dev.off()

#
pdf("7_anova_heatDiagram.pdf",width=15,height=10)
par(mfrow=c(2,4))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))
heatDiagram(results,fitb$coef, primary=1, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=2, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”CST.IP.7”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=3, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”RST.IP.1”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=4, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”RST.IP.7”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=5, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”CST.UB.1”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=6, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”CST.UB.7”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=7, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”RST.UB.1”, mar=c(1.5,1.5,4.5,3.5))
heatDiagram(results,fitb$coef, primary=8, cex=0.5, orientation="portrait", low="green",high="red", ncolors=123, sub=”RST.UB.7”, cex.sub=0.9, mar=c(1.5,1.5,4.5,3.5))

dev.off()

write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
dim(treat.de)

myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)
anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))
length(anovalist)


treat.de.anova<-treat.de[anovalist,]

fitsel.tre2<-merge(treat.de.anova, dat.ann, by.x="ID",by.y="probeids") 
colnames(fitsel.tre2)[1]<-"Target"
 
#rearracnge column order
fitsel.tre2<-fitsel.tre2[, c(1,37:38, 2:10, 19:28, 11:18,29:36)]
colnames(fitsel.tre2)[2:3]<-c("Symbol", "Description")

allvalues<-cbind(rownames(dat.rma.exp2), dat.rma.exp2)
colnames(allvalues)[1]<- "probeids"
colnames(allvalues)[2:length(allvalues)]<-paste(colnames(allvalues) [2:length(allvalues)], “exp”, sep=”.”)

fitsel.tre3<-merge(fitsel.tre2, allvalues, by.x="Target",by.y="probeids") 
dim(fitsel.tre3)


colnames(fitsel.tre3)[1]<-“Probe"
fitsel.tre3.fin<- fitsel.tre3[order(fitsel.tre3$F,decreasing=T),]
fitsel.tre3.fin2<- merge(fitsel.tre3.fin, mydata2, by.x=”Probe”, by.y=”Target”)
write.xls(fitsel.tre3.fin2,file="anova_005.xls",quote=F)

#--complete genelist output
write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
fitsel.tre5<-merge(treat.de, dat.ann, by.x="ID",by.y="probeids") 
colnames(fitsel.tre5)[1]<-"ProbeID"
fitsel.tre5<- fitsel.tre5[,c(1,37:38, 2:10, 19:28, 11:18,29:36)]
colnames(fitsel.tre5)[2:3]<-c("Symbol", "Description")

fitsel.tre6<-merge(fitsel.tre5, allvalues, by.x="ProbeID",by.y="probeids") 
fitsel.tre6.fin<- merge(fitsel.tre6, mydata2, by.x=”ProbeID”, by.y=”Target”)

write.xls(fitsel.tre6.fin,file="complete_genelists.xls",quote=F)

#---calculating ratios & Heatmap-------

#ratios for heatmap and ratio output
ftdexp<-dat.rma.exp2

#all samples
all.samples<-as.data.frame(ftdexp)

#1. Controls
all.contr.cip <-all.samples[,targets$Region==”Ctx” & targets$Condition==”IP” & targets$Status==”sham”]
all.contrM.cip<-rowMeans(all.contr.cip)
all.contr.cub <-all.samples[,targets$Region==”Ctx” & targets$Condition==”UB” & targets$Status==”sham”]
all.contrM.cub<-rowMeans(all.contr.cub)
all.contr.bip <-all.samples[,targets$Region==”BS” & targets$Condition==”IP” & targets$Status==”sham”]
all.contrM.bip<-rowMeans(all.contr.bip)
all.contr.bub <-all.samples[,targets$Region==”BS” & targets$Condition==”UB” & targets$Status==”sham”]
all.contrM.bub<-rowMeans(all.contr.bub)

#2. Exp
all.exp.cip1 <-all.samples[,targets$Condition==”IP” & targets$Status==”CST” & targets$Day==1]
all.exp.cip7 <-all.samples[,targets$Condition==”IP” & targets$Status==”CST” & targets$Day==7]
all.exp.bip1 <-all.samples[,targets$Condition==”IP” & targets$Status==”RST” & targets$Day==1]
all.exp.bip7 <-all.samples[,targets$Condition==”IP” & targets$Status==”RST” & targets$Day==7]
all.exp.cub1 <-all.samples[,targets$Condition==”UB” & targets$Status==”CST” & targets$Day==1]
all.exp.cub7 <-all.samples[,targets$Condition==”UB” & targets$Status==”CST” & targets$Day==7]
all.exp.bub1 <-all.samples[,targets$Condition==”UB” & targets$Status==”RST” & targets$Day==1]
all.exp.bub7 <-all.samples[,targets$Condition==”UB” & targets$Status==”RST” & targets$Day==7]


#3. Ratios
all.coef.cip1<- all.exp.cip1- all.contrM.cip
all.coef.cip7<- all.exp.cip7- all.contrM.cip

all.coef.bip1<- all.exp.bip1- all.contrM.bip
all.coef.bip7<- all.exp.bip7- all.contrM.bip

all.coef.cub1<- all.exp.cub1- all.contrM.cub
all.coef.cub7<- all.exp.cub7- all.contrM.cub

all.coef.bub1<- all.exp.bub1- all.contrM.bub
all.coef.bub7<- all.exp.bub7- all.contrM.bub

#ratios 
mydata2<-cbind(rownames(all.coef.cip1), all.coef.cip1, all.coef.cip7, all.coef.bip1, all.coef.bip7, all.coef.cub1, all.coef.cub7, all.coef.bub1, all.coef.bub7 )
colnames(mydata2)[1]<-"Target"
colnames(mydata2)


#heatmap 
pdf("8_anova_heatmap.pdf",width=12,height=12)
toplot<-fitsel.tre2[order(fitsel.tre2$F,decreasing=T),]
coef.toplot<-mydata2[mydata2$Target%in%toplot$Target,2:17]
colUse<-c(rep(1:8,each=2))
heatmap.2(as.matrix(coef.toplot), col=rev(redgreen(56)), main=" p<0.005",trace="none", breaks=(c(-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.0,1,1.5,3,3.5,4,4.5,5)), ColSideColors=as.character(colUse), cexRow=0.8,cexCol=0.9)
toplot.ip<- coef.toplot[, 1:8]
colUse.ip<-c(rep(1:4,each=2))
heatmap.2(as.matrix(toplot.ip), col=rev(redgreen(56)), main=" IP vs sham, p<0.005",trace="none", breaks=(c(-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.0,1,1.5,3,3.5,4,4.5,5)), ColSideColors=as.character(colUse.ip), cexRow=0.8,cexCol=0.9)
toplot.ub<- coef.toplot[, 9:16]
colUse.ub<-c(rep(5:8,each=2))
heatmap.2(as.matrix(toplot.ub), col=rev(redgreen(56)), main=" UB vs sham, p<0.005",trace="none", breaks=(c(-5,-4.5,-4,-3.5,-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.0,1,1.5,3,3.5,4,4.5,5)), ColSideColors=as.character(colUse.ub), cexRow=0.8,cexCol=0.9)
dev.off()


#Venn
#overlap genelists
sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep=”-“)

pdf("8_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))
vennDiagram(results[,c(1,3)],names=c(v[1],v[3]),main=" IP vs sham, day 1, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,3)],names=c(v[1],v[3]),main=" IP vs sham, day 1, p<0.005", cex=1)
vennDiagram(results[,c(2,4)],names=c(v[2],v[4]),main=" IP vs sham, day 7, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(2,4)],names=c(v[2],v[4]),main=" IP vs sham, day 7, p<0.005", cex=1)
vennDiagram(results[,c(5,7)],names=c(v[5],v[7]),main=" UB vs sham, day 1, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(5,7)],names=c(v[5],v[7]),main=" UB vs sham, day 1, p<0.005", cex=1)
vennDiagram(results[,c(6,8)],names=c(v[6],v[8]),main=" UB vs sham, day 7, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(6,8)],names=c(v[6],v[8]),main=" UB vs sham, day 7, p<0.005", cex=1)
vennDiagram(results[,c(1,5)],names=c(v[1],v[5]),main=" CST day 1, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,5)],names=c(v[1],v[5]),main=" CST day 1, p<0.005", cex=1)
vennDiagram(results[,c(2,6)],names=c(v[2],v[6]),main=" CST day 7, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(2,6)],names=c(v[2],v[6]),main=" CST day 7, p<0.005", cex=1)
vennDiagram(results[,c(3,7)],names=c(v[3],v[7]),main=" RST day 1, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(3,7)],names=c(v[3],v[7]),main=" RST day 1, p<0.005", cex=1)
vennDiagram(results[,c(4,8)],names=c(v[4],v[8]),main=" RST day 7, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(4,8)],names=c(v[4],v[8]),main=" RST day 7, p<0.005", cex=1)
dev.off()

