
# Loading packages--

library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)


# setting the work directories-


targets<-read.delim(file="targets.txt", header=T)


labls<- paste(targets$Tissue, targets$Genotype, targets$Timepoint, targets$SampleID,sep="_")

phD <- targets[,c(5,6,8,9)]
rownames(phD)<- labls

metadata<-data.frame(labelDescription=c("SampleID", "Region", "Condition","Timepoint"), row.names= c("SampleID", "Region", "Condition","Timepoint"))

pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)


###reading the dataset  ##


illumina<- read.delim (file="2011-051 sample probe profile.txt", header=TRUE)

rownames(illumina)<-illumina$PROBE_ID
dim(illumina)


#signal

#necessary columns only

illumina<-illumina[,c(3:194)]

nsampl<-48 #

colnames(illumina)[seq(1,(nsampl*4),4)]
 


mydata<-illumina[,seq(1,(nsampl*4),4)]

#change order to match with targets
mydata<- mydata[,c(25:32,1:24,33:48)]
colnames(mydata)
 
colnames(mydata)<-labls

#getting the detection scores

colnames(illumina)[seq(1,(nsampl*4),4)+1]
detsco.p<-illumina[,seq(1,(nsampl*4),4)+1]
colnames(detsco.p)

detsco.p<- detsco.p[,c(25:32,1:24,33:48)]
colnames(detsco.p)


colnames(detsco.p)<-labls
detsco<-1-detsco.p #new version



colnames(illumina)[seq(1,(nsampl*4),4)+2]
 
sds<-illumina[,seq(1,(nsampl*4),4)+2]
colnames(sds)

sds<- sds[,c(25:32,1:24,33:48)]
colnames(sds)

colnames(sds)<-labls

mydata.notlog<-mydata

colnames(mydata.notlog)<-labls
colnames(mydata)<-labls
colnames(detsco)<-labls
colnames(sds)<-labls

mydata=log2(mydata)
matriz <- as.matrix(mydata)
dim(matriz)


# loading the illumina human array library file------------------

annot <- read.csv(file="MouseRef-8_V2_0_R0_11278551_A.csv", header=T)
dim(annot)



# signal plots-----------------------------


nsampl=48


time<-as.vector(targets$Timepoint)
time [targets$Timepoint=="7m"]<-"pink"
time [targets$Timepoint=="2m"]<-"navy"
time [targets$Timepoint=="11m"]<-"cyan"

batch<-as.vector(targets$Batch)
batch[targets$Batch==1]<-"seagreen"
batch[targets$Batch==2]<-"tan"
batch[targets$Batch==3]<-"lightblue"
batch[targets$Batch==4]<-"brown"
batch[targets$Batch==5]<- "lightcyan"
batch[targets$Batch==6]<-"plum"

tissue<- ifelse(targets$Tissue=="Ctx","blue","darkmagenta")
genotype<- ifelse(targets$Genotype=="WT","grey","gold4")



jpeg("1_signal.jpg", width=1500,height=800)
par(cex.axis=0.38)
boxplot(as.data.frame(mydata),main="Signal Not normalized,  color by Batch",col=batch, names=labls,las=3)
dev.off()



jpeg("1_detsco.jpg", width=1500,height=1000)

#detection scores
par(cex.axis=0.4)

boxplot(as.data.frame(detsco),main="Detection scores",names=labls, col=batch,las=3)
abline(h=0.9, col="red")

dev.off()


#set the thresholds here


thresholds<-c(0.99,0.98,0.97,0.96)
pdf("1-detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata)
#grn<-grn[sort(names(grn))]
col<-batch
#col<-as.character(as.numeric(Samples$strain))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
par(cex.axis=0.4)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=3)
#legend(x="topright",fill=unique(col),as.character(unique(Samples$Genotype[order(Samples$Genotype)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()


#histogram

probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))

pdf("1-detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.5,0.1),labels= seq(0,50,10))
dev.off()


jpeg("1_signal_detsco.jpg", width=1600,height=1000)

par (mfrow = c(6,8))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=labls[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 

dev.off()


# signal correlation plots [before normalization]--------------

matcor<-cor(matriz)

range(as.vector (matcor))
library(heatmap.plus)
clab<-cbind(tissue, genotype,time,batch)


pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.plus(matcor,scale="none",col=heat.colors(40),ColSideColors=clab, cexCol=0.5,cexRow=0.5, main="Not normalized")

dev.off()



# signal correlation plots [from network preprocessing]--------------

pdf("2_AIC.pdf", width=13,height=10)

IAC=cor(mydata,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("all samples (no=",dim(IAC)[2],")"))
dev.off()



meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)



pdf("2_sd.pdf",width=12,height=12)

plot(numbersd, type="n", main="all samples", ylab="z-score") 
text(numbersd, labels=colnames(mydata), cex=0.6,col="red")
#abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()
 

##by region

mydata.ctx<-mydata[,targets$Tissue=="Ctx"]
dim(mydata.ctx)
#24

mydata.str<-mydata[,targets$Tissue=="Str"]
dim(mydata.str)
#24

matcor.ctx<-cor(mydata.ctx)
range(as.vector (matcor.ctx))


matcor.str<-cor(mydata.str)
range(as.vector (matcor.str))


clab.ctx<-clab[targets$Tissue=="Ctx",]
clab.str<-clab[targets$Tissue=="Str",]


pdf("2_corr_heatmap_notNorm_byRegion.pdf", width=10,height=10)
heatmap.plus(matcor.ctx,scale="none",col=heat.colors(40),ColSideColors=clab.ctx, cexCol=0.5,cexRow=0.5, main="Ctx, Not normalized")
heatmap.plus(matcor.str,scale="none",col=heat.colors(40),ColSideColors=clab.str, cexCol=0.5,cexRow=0.5, main="Str, Not normalized")

dev.off()

pdf("2_ctx_AIC.pdf", width=13,height=10)

IAC=cor(mydata.ctx,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("ctx samples (no=",dim(IAC)[2],")"))
dev.off()



meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)
x
#[1] ] 

 #this is the mean IAC, after excluding the diagonal


pdf("2_ctx_sd.pdf",width=10,height=10)

plot(numbersd, type="n", main="ctx samples", ylab="z-score") 
text(numbersd, labels=colnames(mydata.ctx), cex=0.6,col="red")
#abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()



pdf("2_str_AIC.pdf", width=13,height=10)

IAC=cor(mydata.str,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("str samples (no=",dim(IAC)[2],")"))
dev.off()



meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)
x
#[1] ] 

 #this is the mean IAC, after excluding the diagonal


pdf("2_str_sd.pdf",width=10,height=10)

plot(numbersd, type="n", main="str samples", ylab="z-score") 
text(numbersd, labels=colnames(mydata.str), cex=0.6,col="red")
#abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()



# Between-arrays normalization--------------



matrizQ <-normalizeBetweenArrays(matriz,method="quantile")


jpeg("3_normalized.jpg", width=1600,height=1000)
par(cex.axis=0.3)
boxplot(as.data.frame(matrizQ),main="Quantile normalization", col= batch,names=labls, las=3)
dev.off()


#after normalization array signal correlation
matcorN<-cor(matrizQ)
range(matcorN) 
#[1] 0.961119 1.000000


pdf("3_corr_heatmap_Norm.pdf", width=10,height=10)
heatmap.plus(matcorN, scale="none",col=heat.colors(40), ColSideColors=clab, cexCol=0.5,cexRow=0.5, main="normalized")

dev.off()


norm.ctx<-matrizQ[,targets$Tissue=="Ctx"]
dim(norm.ctx)
#24

norm.str<-matrizQ[,targets$Tissue=="Str"]
dim(norm.str)
#24

matcorN.ctx<-cor(norm.ctx)
range(as.vector (matcorN.ctx))
# [1] 0.9819834 1.0000000

matcorN.str<-cor(norm.str)
range(as.vector (matcorN.str))
# [1] 0.9798227 1.0000000

pdf("3_corr_heatmap_Norm_byRegion.pdf", width=10,height=10)
heatmap.plus(matcorN.ctx,scale="none",col=heat.colors(40),ColSideColors=clab.ctx, cexCol=0.5,cexRow=0.5, main="Ctx, normalized")
heatmap.plus(matcorN.str,scale="none",col=heat.colors(40),ColSideColors=clab.str, cexCol=0.5,cexRow=0.5, main="Str, normalized")

dev.off()


# Creating the exprSet object--------------



eSet <- new("ExpressionSet", exprs=matrizQ, phenoData=pD)
eSet
ftdexp<-exprs(eSet)

#---Array clustering based on gene variability-------------------

#functions based on the whole array have been deleted and are present in previous analyses. This because the dist function often produced 'Inf' values. 
#---------------------------------


standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}


rowMads <- apply(ftdexp, 1, mad)


#---top 1000 variable genes-------------------

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))

summary(ftddist2)
ftdcl2 <- hclust(ftddist2)
ftddism2<-as.matrix(ftddist2)
#---top 500 variable genes-------------------
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

ftdcl3 <- hclust(ftddist3)
ftddism3<-as.matrix(ftddist3)


#dendrograms
jpeg("4_clst_mostVariable_dendrogram_v%d.jpg", width=1300,height=800)

par (mfrow = c(1,1))
plot(ftdcl2, xlab="", sub="", main="Top 1000 most variable genes for region V")
plot(ftdcl3, xlab="", sub="", main="Top 500 most variable genes for region V")
dev.off()

#heatmaps
pdf("4_clst_heatmap_mostVariable.pdf", width=10,height=10)

heatmap.plus(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering on the Top 1000 Most Variable Genes",scale="none", ColSideColors=clab, cexRow=0.5,cexCol=0.5)
#the more red, the more distant. 

heatmap.plus(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering on the Top 500 Most Variable Genes",scale="none", ColSideColors=clab, cexRow=0.5,cexCol=0.5)
#the more red, the more distant. 
dev.off()


# Ratio   ##
#all samples
all.samples<-as.data.frame(ftdexp)

#1. Controls
#new data
all.contr.ctx.2m <-all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="WT" & targets$Timepoint=="2m"]
all.contrM.ctx.2m<-rowMeans(all.contr.ctx.2m)

all.contr.ctx.7m <-all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="WT" & targets$Timepoint=="7m"]
all.contrM.ctx.7m<-rowMeans(all.contr.ctx.7m)

all.contr.ctx.10_11m <-all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="WT" & targets$Timepoint=="11m"]
all.contrM.ctx.10_11m<-rowMeans(all.contr.ctx.10_11m)



all.contr.str.2m <-all.samples[,targets$Tissue=="Str" & targets$Genotype=="WT" & targets$Timepoint=="2m"]
all.contrM.str.2m<-rowMeans(all.contr.str.2m)

all.contr.str.7m <-all.samples[,targets$Tissue=="Str" & targets$Genotype=="WT" & targets$Timepoint=="7m"]
all.contrM.str.7m<-rowMeans(all.contr.str.7m)

all.contr.str.10_11m <-all.samples[,targets$Tissue=="Str" & targets$Genotype=="WT" & targets$Timepoint=="11m"]
all.contrM.str.10_11m<-rowMeans(all.contr.str.10_11m)



#2. Exp

all.exp.ctx.2m<- all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="TG" & targets$Timepoint=="2m"]
all.exp.ctx.7m<- all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="TG" & targets$Timepoint=="7m"]
all.exp.ctx.10_11m<- all.samples[,targets$Tissue=="Ctx" & targets$Genotype=="TG" & targets$Timepoint=="11m"]

all.exp.str.2m<- all.samples[,targets$Tissue=="Str" & targets$Genotype=="TG" & targets$Timepoint=="2m"]
all.exp.str.7m<- all.samples[,targets$Tissue=="Str" & targets$Genotype=="TG" & targets$Timepoint=="7m"]
all.exp.str.10_11m<- all.samples[,targets$Tissue=="Str" & targets$Genotype=="TG" & targets$Timepoint=="11m"]




#3. Ratios
all.coef.ctx.2m<- all.exp.ctx.2m- all.contrM.ctx.2m
all.coef.ctx.7m<- all.exp.ctx.7m- all.contrM.ctx.7m
all.coef.ctx.10_11m<- all.exp.ctx.10_11m- all.contrM.ctx.10_11m

all.coef.str.2m<- all.exp.str.2m- all.contrM.str.2m
all.coef.str.7m<- all.exp.str.7m- all.contrM.str.7m
all.coef.str.10_11m<- all.exp.str.10_11m- all.contrM.str.10_11m


#exporting all the data
mydata2<-cbind(rownames(all.coef.ctx.2m), all.coef.ctx.2m, all.coef.ctx.7m, all.coef.ctx.10_11m, all.coef.str.2m, all.coef.str.7m, all.coef.str.10_11m )
colnames(mydata2)[1]<- "Probe"


mydata3<-cbind(rownames(all.samples),all.samples)
colnames(mydata3)[1]<-"Probe"
colnames(mydata3)[2:length(mydata3)]<- paste(colnames(mydata3)[2:length(mydata3)],"expr",sep=".")

ratio.exp<-merge(mydata2,mydata3,by.x="Probe",by.y="Probe")



###########################################################
#-------------Contrast analysis ------
###########################################################


#linear fitting


TS<- paste(targets$Tissue ,targets$Genotype, targets$Timepoint ,sep="_")
TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)

colnames(design) <- levels(TS) 
colnames(design)
fit<- lmFit(eSet, design)

cont.anova <- makeContrasts(ctx.2m.TG_vs_ctx.2m.WT = Ctx_TG_2m - Ctx_WT_2m, 
			    ctx.7m.TG_vs_ctx.7m.WT = Ctx_TG_7m - Ctx_WT_7m,
                  ctx.11m.TG_vs_ctx.11m.WT = Ctx_TG_11m - Ctx_WT_11m,
			          str.2m.TG_vs_str.2m.WT = Str_TG_2m - Str_WT_2m, 
			    str.7m.TG_vs_str.7m.WT = Str_TG_7m - Str_WT_7m,
                  str.11m.TG_vs_str.11m.WT = Str_TG_11m - Str_WT_11m,
levels=design) 


fit2.anova<- contrasts.fit(fit, cont.anova)

#bayes
fitb<- eBayes(fit2.anova) 

#selecting the statistical cutoff

decide <- matrix(c("fdr",0.05, "fdr",0.1,"none",0.001,"none",0.005, "none", 0.01),nrow=5,ncol=2,byr=T)

# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0

for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}

pdf("5_threshold_selection.pdf", width=13,height=6)

par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy

xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()

#chosen threshold: 

#select here the chosen paramaters
chosen.adjust<-"none"
chosen.p<-0.005
current.contrast<-"contrast"


results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))
#change p value and adjust method to get a reasonable gene list


#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf("5_selected contrast.pdf", width=10,height=10)

as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes, p<0.005 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))

dev.off()

write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
dim(treat.de)


#output for contrasts

myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)

anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))

length(anovalist)
#[1] 4782

treat.de.anova<-treat.de[anovalist,]

fitsel.tre2<-merge(treat.de.anova, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.tre2)[1]<-"Probe"

fitsel.ratio<-merge(fitsel.tre2,ratio.exp, by.x="Probe",by.y="Probe" )

myNames <-names(fitsel.ratio)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratio2<-cbind(
Probe= fitsel.ratio$Probe, 
Accession=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,coefs.col],
fitsel.ratio[,pvals.col],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,res.col],
fitsel.ratio[,ts.col],
fitsel.ratio[,c(56:127, 29:55)]

)

dim(fitsel.ratio2)

     
fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]

#out.file<-paste(paste(current.contrast,chosen.adjust,chosen.p,sep="_"),"xls",sep=".")
write.xls(fitsel.ratio2,file="significant_geneList_pLess005.xls",quote=F)



pdf("6_heatDiagram.pdf",width=15,height=10)
par(mfrow=c(2,3))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))

for (k in 1:6){

heatDiagram(results,fitb$coef, primary=k, cex=0.6, orientation="portrait", low="green",high="red", ncolors=123, mar=c(1.5,1.5,4.5,3.5))
}
dev.off()

pdf("6_hist_pvalue.pdf", height=10,width=15)
par(mfrow=c(2,3))
for (k in 1:6){
hist(fitb$p.value[,k], main=colnames(fitb$p.value)[k],xlab="p.value-distribution", br=80,col="skyblue")
}
dev.off()

#Venn

sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep="-")

pdf("6_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))

vennDiagram(results[,c(1,4)],names=c(v[1],v[4]),main="TG vs. WT, 2m, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,4)],names=c(v[1],v[4]), main="TG vs. WT, 2m, p<0.005", cex=1)

vennDiagram(results[,c(2,5)],names=c(v[2],v[5]),main="TG vs. WT, 7m, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(2,5)],names=c(v[2],v[5]), main="TG vs. WT, 7m, p<0.005", cex=1)

vennDiagram(results[,c(3,6)],names=c(v[3],v[6]),main="TG vs. WT, 10-11m, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=0.8)
vennDiagram(results[,c(3,6)],names=c(v[3],v[6]), main="TG vs. WT, 10-11m, p<0.005", cex=0.8)
dev.off()


#heatmap 

toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),c(31:54)]

col.toUse<-as.character(c(rep("grey",4), rep("navy",4), rep("cyan",4), rep("gold4",4), rep("purple",4), rep("yellow",4)))

toplot2<-toplot[1:1000,]

pdf("7_anova_heatmap.pdf", height=10,width=10)
heatmap.2(as.matrix(toplot2), col=rev(redgreen(48)), main="p<0.005 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors= col.toUse, cexCol=0.5, labRow="",keysize=0.8)


heatmap.2(as.matrix(toplot2[,1:12]), col=rev(redgreen(48)), main="ctx, p<0.005 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors= col.toUse[1:12], cexCol=0.5, labRow="",keysize=0.8)


heatmap.2(as.matrix(toplot2[,13:24]), col=rev(redgreen(48)), main="str, p<0.005 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors= col.toUse[13:24], cexCol=0.5, labRow="",keysize=0.8)

dev.off()


#complete list of genes

fitsel.treAll<-merge(treat.de, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.treAll)[1]<-"Probe"

fitsel.ratioAll<-merge(fitsel.treAll,ratio.exp, by.x="Probe", by.y="Probe")

myNames <-names(fitsel.ratioAll)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratioN<-cbind(
Probe= fitsel.ratioAll$Probe, 
Accession=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,coefs.col],
fitsel.ratioAll[,pvals.col],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,res.col],
fitsel.ratioAll[,ts.col],
fitsel.ratioAll[,c(56:127, 29:55)]
)
fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
write.xls(fitsel.ratioN, "complete_genelist.xls" ,quote=F)
