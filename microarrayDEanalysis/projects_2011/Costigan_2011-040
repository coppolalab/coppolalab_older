

2011-040 sample probe profile.txt
72 samples, mouse v2, illumina
2011-04, excluding AJ_naïve_4
2011-05-18: run DE and wgcna excluding AJ_Ax_1
            re0run the colrrelation with updated files
            run correlations of All genes levels with the absolute phenotype and pain values

# Loading packages----

library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)

# setting the work directories------------

setwd("F:/Study/Costigan_042011")


targets<-read.delim(file="targets.txt", header=T)

labls<- targets$SampleName

phD <- targets[,c(4,5,6)]
rownames(phD)<- labls

metadata<-data.frame(labelDescription=c("SampleIDName", "Strain", "Condition"), row.names= c("SampleIDName", "Strain", "Condition"))

pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)
#############################
###reading the dataset  ##
#############################

illumina<- read.delim (file="2011-040 sample probe profile.txt", header=TRUE)

rownames(illumina)<-illumina$PROBE_ID
dim(illumina)

#signal
#necessary columns only

illumina<-illumina[,c(3:290)]

nsampl<-72 #

colnames(illumina)[seq(1,(nsampl*4),4)]

mydata<-illumina[,seq(1,(nsampl*4),4)]

#change order to match with targets
mydata<- mydata[,c(65:72,17:32,9:16,1:8,33:40,57:64,49:56,41:48)]
colnames(mydata)
 
colnames(mydata)<-labls

#getting the detection scores

colnames(illumina)[seq(1,(nsampl*4),4)+1]
detsco.p<-illumina[,seq(1,(nsampl*4),4)+1]
colnames(detsco.p)

detsco.p<- detsco.p[,c(65:72,17:32,9:16,1:8,33:40,57:64,49:56,41:48)]
colnames(detsco.p)

colnames(detsco.p)<-labls
detsco<-1-detsco.p #new version
colnames(illumina)[seq(1,(nsampl*4),4)+2]
 sds<-illumina[,seq(1,(nsampl*4),4)+2]
colnames(sds)

sds<- sds[,c(65:72,17:32,9:16,1:8,33:40,57:64,49:56,41:48)]
colnames(sds)

colnames(sds)<-labls

mydata.notlog<-mydata
mydata=log2(mydata)
matriz <- as.matrix(mydata)
dim(matriz)

annot <- read.csv(file="MouseRef-8_V2_0_R0_11278551_A.csv", header=T)
dim(annot)

# signal plots-----------------------------
nsampl=72
strain<-as.vector(targets$Strain)
strain[targets$Strain=="129"]<-"grey"
strain[targets$Strain=="AJ"]<-"navy"
strain[targets$Strain=="C3H"]<-"cyan"
strain[targets$Strain=="C57"]<-"pink"
strain[targets$Strain=="CAST"]<-"gold4"
strain[targets$Strain=="DBA"]<-"purple"
strain[targets$Strain=="NOD"]<-"lightgreen"
strain[targets$Strain=="NZO"]<-"yellow"
strain[targets$Strain=="WSB"]<-"red"

batch<-as.vector(targets$Batch)
batch[targets$Batch==1]<-"seagreen"
batch[targets$Batch==2]<-"tan"
batch[targets$Batch==3]<-"lightblue"
batch[targets$Batch==4]<-"brown"
batch[targets$Batch==5]<- "lightcyan"
batch[targets$Batch==6]<-"plum"
batch[targets$Batch==7]<-"orange"
batch[targets$Batch==8]<-"lightyellow"
batch[targets$Batch==9]<-"black"

condition<- ifelse(targets$Condition=="NAIVE","blue","darkmagenta")

jpeg("1_signal.jpg", width=1800,height=1000)
par(cex.axis=0.6)
boxplot(as.data.frame(mydata),main="Signal Not normalized,  color by Batch",col=batch, names=labls,las=3)
dev.off()

jpeg("1_detsco.jpg", width=1500,height=1000)
#detection scores
par(cex.axis=0.7)
boxplot(as.data.frame(detsco),main="Detection scores",names=labls, col=batch,las=3)
abline(h=0.9, col="red")
dev.off()


#set the thresholds here
thresholds<-c(0.99,0.98,0.97,0.96)
pdf("1-detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata)
#grn<-grn[sort(names(grn))]
col<-batch
#col<-as.character(as.numeric(Samples$strain))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
par(cex.axis=0.6)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=3)
#legend(x="topright",fill=unique(col),as.character(unique(Samples$Genotype[order(Samples$Genotype)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()


#histogram
probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))
pdf("1-detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.5,0.1),labels= seq(0,50,10))
dev.off()


jpeg("1_signal_detsco.jpg", width=1600,height=1000)
par (mfrow = c(8,9))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=labls[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 
dev.off()

# signal correlation plots 

matcor<-cor(matriz)
range(as.vector (matcor))

setwd("F:/Study/Costigan_042011/DE_excludeAJ_NAIVE4")
library(heatmap.plus)
clab<-cbind(strain, condition,batch)

pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.plus(matcor,scale="none",col=heat.colors(40),ColSideColors=clab, cexCol=0.6,cexRow=0.6, main="Not normalized")
dev.off()

# signal correlation plots [from network preprocessing]--------------

pdf("2_AIC.pdf", width=13,height=10)

IAC=cor(mydata,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("all samples (no=",dim(IAC)[2],")"))
dev.off()

meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)

 #this is the mean IAC, after excluding the diagonal
pdf("2_sd.pdf",width=12,height=12)
plot(numbersd, type="n", main="all samples", ylab="z-score") 
text(numbersd, labels=colnames(mydata), cex=0.6,col="red")
#abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()
 
SDo<-as.data.frame(cbind(Array=(1:length(numbersd)),Name=names(numbersd),SD=(numbersd)))
SDo[,3]<-as.numeric(as.character(SDo[,3]))
SDo<-SDo[order(SDo[,3]),]
SDoOut<-SDo[SDo[,3]<=(-2),]
 
removeSamples = match(c("AJ_NAIVE_4","AJ_AX5D_1"), colnames(matriz))

matriz.g<-matriz[,-removeSamples]
pD.g<-pD [-removeSamples]
targets.g<-targets [-removeSamples,]
labls.g<- labls[-removeSamples]
batch.g<-batch[-removeSamples]
clab.g<- clab[-removeSamples,]
detsco.g<-detsco[,-removeSamples]
strain.g<-strain[-removeSamples]
condition.g<-condition[-removeSamples]
matcor.g<-cor(matriz.g)

range(as.vector (matcor.g))
pdf("2_corr_heatmap_notNorm_noOut.pdf", width=10,height=10)
heatmap.plus(matcor.g,scale="none",col=heat.colors(40),ColSideColors=clab.g, cexCol=0.6,cexRow=0.6, main="Not normalized, remove AJ_NAÏVE_4, AJ_AX5D_1")

dev.off()
# Between-arrays normalization--------------
matrizQ <-normalizeBetweenArrays(matriz.g,method="quantile")

jpeg("3_normalized.jpg", width=1500,height=1000)
par(cex.axis=0.7)
boxplot(as.data.frame(matrizQ),main="Quantile normalization", col= batch.g,names=labls.g, las=3)
dev.off()

#after normalization array signal correlation
matcorN<-cor(matrizQ)
range(matcorN) 

pdf("3_corr_heatmap_Norm.pdf", width=10,height=10)
heatmap.plus(matcorN, scale="none",col=heat.colors(40), ColSideColors=clab.g, cexCol=0.6,cexRow=0.6, main="normalized")
dev.off()

# Creating the exprSet object--------------
eSet <- new("ExpressionSet", exprs=matrizQ, phenoData=pD.g)
#---Array clustering based on gene variability-------------------

#functions based on the whole array have been deleted and are present in previous analyses. This because the dist function often produced 'Inf' values. 
#---------------------------------
standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}

rowMads <- apply(ftdexp, 1, mad)
#---top 1000 variable genes-------------------
ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))

summary(ftddist2)
ftdcl2 <- hclust(ftddist2)
ftddism2<-as.matrix(ftddist2)
#---top 500 variable genes--
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

ftdcl3 <- hclust(ftddist3)
ftddism3<-as.matrix(ftddist3)


#dendrograms
jpeg("4_clst_mostVariable_dendrogram_v%d.jpg", width=1300,height=800)
par (mfrow = c(1,1))
plot(ftdcl2, xlab="", sub="", main="Top 1000 most variable genes for region V")
plot(ftdcl3, xlab="", sub="", main="Top 500 most variable genes for region V")
dev.off()

#heatmaps
pdf("4_clst_heatmap_mostVariable.pdf", width=10,height=10)
heatmap.plus(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering on the Top 1000 Most Variable Genes",scale="none", ColSideColors=clab.g, cexRow=0.6,cexCol=0.6)
#the more red, the more distant. 
heatmap.plus(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering on the Top 500 Most Variable Genes",scale="none", ColSideColors=clab.g, cexRow=0.6,cexCol=0.6)
#the more red, the more distant. 
dev.off()

#---MDS-------------------
cm1 <- cmdscale(ftddist2, eig=TRUE)

pdf("4_MDS.pdf", width=20,height=10)
par(mfrow=c(1,2))
myPlot <- function(x, ...)
  plot(x$points, xlab="Component 1", ylab="Component 2", lwd=4,col=strain.g, pch=19, xlim=c(-80,80),...)
#check the colors in the above command

myPlot(cm1, main=" ")
chw <- par()$cxy[1]
text(x=cm1$points[,1]+(0.3*chw),y=cm1$points[,2],main="MDS", lwd=4,labels="",adj=0, cex=0.5)

legend(x="topleft",legend=unique(targets.g$Strain),col=unique(strain.g),fill= unique(strain.g), cex=1.2)
myPlot <- function(x, ...)
  plot(x$points, xlab="Component 1", ylab="Component 2", lwd=4,col=condition.g, pch=19, xlim=c(-80,80),...)
#check the colors in the above command
myPlot(cm1, main=" ")
chw <- par()$cxy[1]
text(x=cm1$points[,1]+(0.3*chw),y=cm1$points[,2],main="MDS", lwd=4,labels="",adj=0, cex=0.5)
legend(x="topleft",legend=unique(targets.g$Condition),col=unique(condition.g),fill= unique(condition.g), cex=1.2)
dev.off()

# ************* Ratio  ************** ##
#all samples
all.samples<-as.data.frame(ftdexp)

#1. Controls
#new data
all.contr.129 <-all.samples[,targets.g$Strain=="129" & targets.g$Condition=="NAIVE"]
all.contrM.129<-rowMeans(all.contr.129)

all.contr.aj <-all.samples[,targets.g$Strain=="AJ" & targets.g$Condition=="NAIVE"]
all.contrM.aj<-rowMeans(all.contr.aj)

all.contr.c3h <-all.samples[,targets.g$Strain=="C3H" & targets.g$Condition=="NAIVE"]
all.contrM.c3h<-rowMeans(all.contr.c3h)

all.contr.c57 <-all.samples[,targets.g$Strain=="C57" & targets.g$Condition=="NAIVE"]
all.contrM.c57<-rowMeans(all.contr.c57)

all.contr.cast <-all.samples[,targets.g$Strain=="CAST" & targets.g$Condition=="NAIVE"]
all.contrM.cast<-rowMeans(all.contr.cast)

all.contr.dba <-all.samples[,targets.g$Strain=="DBA" & targets.g$Condition=="NAIVE"]
all.contrM.dba<-rowMeans(all.contr.dba)

all.contr.nod <-all.samples[,targets.g$Strain=="NOD" & targets.g$Condition=="NAIVE"]
all.contrM.nod<-rowMeans(all.contr.nod)

all.contr.nzo <-all.samples[,targets.g$Strain=="NZO" & targets.g$Condition=="NAIVE"]
all.contrM.nzo<-rowMeans(all.contr.nzo)

all.contr.wsb <-all.samples[,targets.g$Strain=="WSB" & targets.g$Condition=="NAIVE"]
all.contrM.wsb<-rowMeans(all.contr.wsb)

#2. Exp
all.exp.129<- all.samples[,targets.g$Strain=="129" & targets.g$Condition=="AX5D"]
all.exp.aj<- all.samples[,targets.g$Strain=="AJ" & targets.g$Condition=="AX5D"]
all.exp.c3h<- all.samples[,targets.g$Strain=="C3H" & targets.g$Condition=="AX5D"]
all.exp.c57<- all.samples[,targets.g$Strain=="C57" & targets.g$Condition=="AX5D"]
all.exp.cast<- all.samples[,targets.g$Strain=="CAST" & targets.g$Condition=="AX5D"]
all.exp.dba<- all.samples[,targets.g$Strain=="DBA" & targets.g$Condition=="AX5D"]
all.exp.nod<- all.samples[,targets.g$Strain=="NOD" & targets.g$Condition=="AX5D"]
all.exp.nzo<- all.samples[,targets.g$Strain=="NZO" & targets.g$Condition=="AX5D"]
all.exp.wsb<- all.samples[,targets.g$Strain=="WSB" & targets.g$Condition=="AX5D"]

#3. Ratios
all.coef.129<- all.exp.129- all.contrM.129
all.coef.aj<- all.exp.aj- all.contrM.aj
all.coef.c3h<- all.exp.c3h- all.contrM.c3h
all.coef.c57<- all.exp.c57- all.contrM.c57
all.coef.cast<- all.exp.cast- all.contrM.cast
all.coef.dba<- all.exp.dba- all.contrM.dba
all.coef.nod<- all.exp.nod- all.contrM.nod
all.coef.nzo<- all.exp.nzo -all.contrM.nzo
all.coef.wsb<- all.exp.wsb- all.contrM.wsb

#exporting all the data
mydata2<-cbind(rownames(all.coef.129), all.coef.129, all.coef.aj, all.coef.c3h, all.coef.c57, all.coef.cast, all.coef.dba, all.coef.nod, all.coef.nzo, all.coef.wsb )
colnames(mydata2)[1]<- "Probe"

mydata3<-cbind(rownames(all.samples),all.samples)
colnames(mydata3)[1]<-"Probe"
colnames(mydata3)[2:length(mydata3)]<- paste(colnames(mydata3)[2:length(mydata3)],"expr",sep=".")
ratio.exp<-merge(mydata2,mydata3,by.x="Probe",by.y="Probe")

###########################################################
#-------------Contrast analysis ------
###########################################################


#linear fitting

# to avoild variable starting with numeric, re-read target file(has been changed
#for limma
TS<- paste(targets.g$Condition, targets.g$Strain ,sep="_")
TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)
colnames(design) <- levels(TS) 
fit<- lmFit(eSet, design)

cont.anova <- makeContrasts(AX5D.129_vs_NAIVE.129 = AX5D_129- NAIVE_129, 
				AJ.AX5D_vs_AJ.NAIVE = AX5D_AJ- NAIVE_AJ, 
				C3H.AX5D_vs_C3H.NAIVE = AX5D_C3H- NAIVE_C3H, 
				C57.AX5D_vs_C57.NAIVE = AX5D_C57- NAIVE_C57, 
				CAST.AX5D_vs_CAST.NAIVE = AX5D_CAST- NAIVE_CAST, 
				DBA.AX5D_vs_DBA.NAIVE  = AX5D_DBA- NAIVE_DBA, 
				NOD.AX5D_vs_NOD.NAIVE = AX5D_NOD- NAIVE_NOD, 
				NZO.AX5D_vs_NZO.NAIVE = AX5D_NZO-NAIVE_NZO, 
				WSB.AX5D_vs_WSB.NAIVE = AX5D_WSB- NAIVE_WSB, 
				levels=design) 


fit2.anova<- contrasts.fit(fit, cont.anova)
#bayes
fitb<- eBayes(fit2.anova) 

#selecting the statistical cutoff

decide <- matrix(c("fdr",0.05, "fdr",0.1,"none",0.001,"none",0.005, "none", 0.01),nrow=5,ncol=2,byr=T)
# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0
for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}

pdf("5_threshold_selection.pdf", width=13,height=6)
par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()


#select here the chosen paramaters
chosen.adjust<-"fdr"
chosen.p<-0.05
current.contrast<-"contrast"

results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))
#change p value and adjust method to get a reasonable gene list
#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf("5_selected contrast.pdf", width=10,height=10)
as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)
barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes, fdr p<0.05 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))
dev.off()

write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
dim(treat.de)

#output for contrasts
myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)

anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))
length(anovalist)
treat.de.anova<-treat.de[anovalist,]
fitsel.tre2<-merge(treat.de.anova, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.tre2)[1]<-"Probe"
fitsel.ratio<-merge(fitsel.tre2,ratio.exp, by.x="Probe",by.y="Probe" )

myNames <-names(fitsel.ratio)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratio2<-cbind(
Probe= fitsel.ratio$Probe, 
Accession=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,coefs.col],
fitsel.ratio[,pvals.col],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,res.col],
fitsel.ratio[,ts.col],
fitsel.ratio[,c(77:181, 50:76)])

dim(fitsel.ratio2)
fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]
write.xls(fitsel.ratio2,file="significant_geneList_fdr05.xls",quote=F)

pdf("6_heatDiagram.pdf",width=15,height=10)
par(mfrow=c(3,3))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))
for (k in 1:9){
heatDiagram(results,fitb$coef, primary=k, cex=0.6, orientation="portrait", low="green",high="red", ncolors=123, mar=c(1.5,1.5,4.5,3.5))
}
dev.off()

pdf("6_hist_pvalue.pdf", height=10,width=15)
par(mfrow=c(3,3))
for (k in 1:9){
hist(fitb$p.value[,k], main=colnames(fitb$p.value)[k],xlab="p.value-distribution", br=80,col="skyblue")
}
dev.off()

#Venn
sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep="-")
pdf("6_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))
vennDiagram(results[,c(1,2,3)],names=c(v[1],v[2], v[3]),main="AX5D vs. NAÏVE, FDR p<0.05", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,2,3)],names=c(v[1],v[2], v[3]), main="AX5D vs. NAÏVE, FDR p<0.05", cex=1)
vennDiagram(results[,c(4,5,6)],names=c(v[4],v[5], v[6]), main="AX5D vs. NAÏVE, FDR p<0.05", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(4,5,6)],names=c(v[4],v[5], v[6]), main="AX5D vs. NAÏVE, FDR p<0.05",cex=1)
vennDiagram(results[,c(7,8,9)],names=c(v[7],v[8], v[9]), main="AX5D vs. NAÏVE, FDR p<0.05", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(7,8,9)],names=c(v[7],v[8], v[9]), main="AX5D vs. NAÏVE, FDR p<0.05", cex=1)
dev.off()


#heatmap 

toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),c(52:86)]
col.toUse<-as.character(c(rep("grey",4), rep("navy",3), rep("cyan",4), rep("pink",4), rep("gold4",4), rep("purple",4), rep("lightgreen",4), rep("yellow",4), rep("red",4)))

toplot2<-toplot[1:1000,]

pdf("7_anova_heatmap.pdf", height=10,width=10)
heatmap.2(as.matrix(toplot2), col=rev(redgreen(48)), main="AX5D vs. NAIVE, fdr p<0.05 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors= col.toUse, cexCol=0.6, labRow="",keysize=0.8)
heatmap.2(as.matrix(toplot2), col=rev(redgreen(48)), main="AX5D vs. NAIVE, fdr p<0.05 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors= col.toUse, cexCol=0.6, labRow="",keysize=0.8, dendrogram = "row", Colv=FALSE)
dev.off()

#complete list of genes
fitsel.treAll<-merge(treat.de, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.treAll)[1]<-"Probe"

fitsel.ratioAll<-merge(fitsel.treAll,ratio.exp, by.x="Probe", by.y="Probe")

myNames <-names(fitsel.ratioAll)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratioN<-cbind(
Probe= fitsel.ratioAll$Probe, 
Accession=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,coefs.col],
fitsel.ratioAll[,pvals.col],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,res.col],
fitsel.ratioAll[,ts.col],
fitsel.ratioAll[,c(77:181, 50:76)]
)
fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
write.xls(fitsel.ratioN, "complete_genelist.xls" ,quote=F)

