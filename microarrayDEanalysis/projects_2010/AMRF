Giovanni Coppola Laboratory, UCLA

# Loading packages-------------------

library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)


# setting the work directories------------

setwd("C:/Documents and Settings/Study/AMRF")

# saving the data-------------------
Samples<-read.delim(file="targets.txt", header=T)

labls<- paste(Samples$Tissue, Samples$Time, Samples$Status, Samples$Replicate,sep="_")

phD <- Samples[,c(7,9,10,8)]
rownames(phD)<-labls
metadata<-data.frame(labelDescription=c("Tissue", "Time","Status","Replicate"), row.names= c("Tissue", "Time","Status","Replicate"))
pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)


###reading the dataset  ##

illumina<- read.delim (file="2010-045 sample  probe profile.txt", header=TRUE)

rownames(illumina)<-illumina$PROBE_ID
dim(illumina)

#signal

#necessary columns only
illumina<-illumina[,c(3:162)]
nsampl<-40 

colnames(illumina)[seq(1,(nsampl*4),4)]
 
mydata<-illumina[,seq(1,(nsampl*4),4)]
#match orders of targets, 

mydata<-mydata[,c(33:40,9:16,1:8,17:32)]
 colnames(mydata)<-labls

#detction scores p-value
 detsco.p<-illumina[,seq(1,(nsampl*4),4)+1]

detsco.p<- detsco.p[,c(33:40,9:16,1:8,17:32)]
detsco<-1-detsco.p 
colnames(detsco)<-labls

#getting the sds
colnames(illumina)[seq(1,(nsampl*4),4)+2]
sds<-illumina[,seq(1,(nsampl*4),4)+2]
sds<- sds[,c(33:40,9:16,1:8,17:32)]
colnames(sds)<-labls

#getting the bead no
colnames(illumina)[seq(1,(nsampl*4),4)+3]
beads<-illumina[,seq(1,(nsampl*4),4)+3]
beads<- beads[,c(33:40,9:16,1:8,17:32)]
colnames(beads)<-labls

mydata.notlog<-mydata
mydata=log2(mydata)
matriz <- as.matrix(mydata)

# loading the illumina human array library file-

annot <- read.csv(file="MouseRef-8_V2_0_R0_11278551_A.csv", header=T)
dim(annot)

# signal plots-----------------------------

nsampl=40
   
batch<-as.vector(Samples$Batch)
batch[Samples$Batch ==1]<- "blue"
batch[Samples$Batch ==2]<- "green"
batch[Samples$Batch ==3]<- "pink"
batch[Samples$Batch ==4]<- "black"
batch[Samples$Batch ==5]<- "purple"


time<-as.vector(Samples$Time)
time[Samples$Time =="5h"]<- "yellow"
time[Samples$Time =="24h"]<- "gold4"
time[Samples$Time =="72h"]<- "brown"

status<-ifelse(Samples$Status=="CTRL", "lightgreen", "orange")
tissue<-ifelse(Samples$Tissue=="Nisol", "grey", "navy")


jpeg("1_signal.jpg", width=1800,height=800)
par(cex.axis=0.6)
boxplot(as.data.frame(matriz),main="Signal Not normalized",col=batch, names=labls, las=3)
dev.off()

# signal distribution plots-
jpeg("1-signal_distribution.jpg", width=2000,height=1500)
par(mfrow=c(4,5))
for (k in 1:19){
   plot(density(mydata[,k]), main=paste("signal distribution, array", k, sep="-"), cex=0.8)
}
dev.off()

jpeg("1-detsco-distribution.jpg", width=2000,height=1500)
par(mfrow=c(4,5))
for (k in 1:19){
   plot(density(detsco[,k]), main=paste("detection scores, array", k, sep="-"), cex=0.8)
}
dev.off()


jpeg("1_detsco.jpg", width=1800,height=1000)
#detection scores
par(cex.axis=0.5)
boxplot(as.data.frame(detsco),main="Detection scores",names=labls, col=batch,las=3)
abline(h=0.9, col="red")
abline(h=0.8, col="blue")
dev.off()


#det_scores stats
jpeg("1_detsco%d.jpg", width=1300,height=800)
boxplot (as.data.frame(detsco))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-labls
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
write.xls(det.stats,file="detsco_stats.xls")


#set the thresholds here
ord<-read.delim(“ord.txt”, header=T)
detsco.ord<-detsco[,oo]

thresholds<-c(0.99,0.98,0.97,0.96)
pdf("1-detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata)
#grn<-grn[sort(names(grn))]
#col<-as.character(as.numeric(Samples$Batch))
col<-batch

#col<-as.character(as.numeric(Samples$strain))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2,cex.axis=0.6)
#legend(x="topright",fill=unique(col),as.character(unique(Samples$Batch[order(Samples$Array)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()


#histogram
probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))

pdf("1-detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.5,0.1),labels= seq(0,50,10))
dev.off()


d99<-apply(detsco,1,function(x)length(which(x>=0.99)))
d98<-apply(detsco,1,function(x)length(which(x>=0.98)))
d97<-apply(detsco,1,function(x)length(which(x>=0.97)))
d96<-apply(detsco,1,function(x)length(which(x>=0.96)))
d95<-apply(detsco,1,function(x)length(which(x>=0.95)))

det.out<-cbind(rownames(detsco),d99,d98,d97,d96,d95)
colnames(det.out)[1]<-“Probe”

row.mean<-apply(ftdexp,1,mean)
row.sd<-apply(ftdexp,1,sd)
row.cv<-row.sd/row.mean

data.out<-cbind(rownames(ftdexp), ftdexp)
colnames(data.out)[1]<-“Probe”

annot<-ill.array.nodup[,c(14,11,12,23)]
colnames(annot)[1]<-“Probe”

out2<-merge(annot, data.out, by.x=”Probe”, by.y=”Probe”)
out3<-merge(out2, det.out, by.x=”Probe”, by.y=”Probe”)
write.table(out3, “jullyArray_forNetwork.csv”, sep=”,”, row.names=F)

#No beads and sds info, so omit the following

jpeg("1_beads%d.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(as.data.frame(beads),main="Bead No",names=labls, las=3)
#bead average no
par(cex.axis=0.7)
boxplot(as.data.frame(sds),main="Bead SD",names=labls, las=3)
#bead standard deviation

#BEAD SD stats
par(cex.axis=1)
boxplot (as.data.frame(sds))->detsco.stats
det.stats<- as.data.frame(t(detsco.stats$stats))
colnames(det.stats)<-c("lower whisker","lower hinge", "median", "upper hinge","upper whisker")
rownames(det.stats)<-labls
det.stats<-cbind(Sample=rownames(det.stats),det.stats)
#write.xls(det.stats,file="beadSD_stats.xls")

dev.off()

thresholds<-c("mean","median")

pdf("beadSD_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in 1:2) {

apply(sds,2,thresholds[thr])->grn
grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Condition)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Condition)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
apply(log2(sds),2,thresholds[thr])->grn
grn<-grn[sort(names(grn))]
col<-as.character(as.numeric(Samples$Condition[order(Samples$Condition)]))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)

sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Log2 BeadSD (",thresholds[thr],")",sep=""),xlab="",ylab=paste(thresholds[thr]," SD",sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=2)
legend(x="topright",fill=unique(col),as.character(unique(Samples$Condition[order(Samples$Condition)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)

abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)

}
dev.off()

jpeg("1_sds.jpg", width=1800,height=800)
par(cex.axis=0.5)
boxplot(log2(as.data.frame(sds)),main="Bead SD (log scale)",names=labls, las=3)
#bead standard deviation (log2)
dev.off()

jpeg("1_signal_detsco.jpg", width=1800,height=1000)

par (mfrow = c(5,8))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=labls[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 

dev.off()

# signal correlation plots [before normalization]--------------

matcor<-cor(matriz)
range(as.vector (matcor))


pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.2(matcor,trace="none",col=heat.colors(40),ColSideColors= batch, cexCol=1,cexRow=1, main="Clustering Based on Inter-Array Pearson Coefficient, Not normalized" , keysize=1)
dev.off()

library(heatmap.plus)

clab=cbind(tissue,status,time,batch)
pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.plus(matcor,scale="none",col=heat.colors(40), ColSideColors=clab, cexCol=0.5,cexRow=0.5, main="Clustering Based on Inter-Array Pearson Coefficient, Not normalized" )
dev.off()


## the tech replicate similer, just delete the last one

mydata<-mydata[,-40]
matriz<-as.matrix(mydata)
Samples<-Samples[-40,]
labls<-labls[-40]
status<-status[-40]
tissue<-tissue[-40]
time<-time[-40]
batch<-batch[-40]

matcor<-cor(matriz)

range(as.vector (matcor))

clab=cbind(tissue,status,time,batch)

pdf("2_corr_heatmap_notNorm_noTechRep.pdf", width=10,height=10)
heatmap.plus(matcor,scale="none",col=heat.colors(40), ColSideColors=clab, cexCol=0.5,cexRow=0.5, main="Not normalized, rm technical replicate" )
dev.off()

# signal correlation plots [from network preprocessing]--------------

pdf("2_AIC_noTechRep.pdf", width=13,height=10)
IAC=cor(matriz,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("All samples (no=",dim(IAC)[2],")"))
dev.off()

meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)

pdf("2_sd_noTechRep.pdf",width=12,height=12)

plot(numbersd, type="n", main="all samples", ylab="z-score",) 
text(numbersd, labels=labls, cex=0.7,col="red")
abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()


# Outlier Exclusion--

removeSamples = match(c("SGN_24h_CTRL_4"), colnames(matriz))


matriz.g<-matriz[,-removeSamples]
pD.g<-pD[-removeSamples]
Samples.g<-Samples[-removeSamples,]
labls.g<- labls[-removeSamples]
detsco.g<- detsco[,-removeSamples]
status.g<- status[-removeSamples]
tissue.g<- tissue[-removeSamples]
time.g<- time[-removeSamples]

batch.g<- batch[-removeSamples]

matcor.g<-cor(matriz.g)

range(as.vector (matcor.g))

clab.g=cbind(tissue.g,status.g,time.g,batch.g)
colnames(clab.g)<-c("tissue","status","time","batch")

pdf("2_corr_heatmap_notNorm_noOutlier_noTech.pdf", width=10,height=10)
heatmap.plus(matcor.g,scale="none",col=heat.colors(40),ColSideColors=clab.g, cexCol=0.6,cexRow=0.6, main="removing SGN_24h_CTRL_4, Not normalized")
dev.off()

phD <- Samples.g[,c(7,9,10,8)]
rownames(phD)<-labls.g
metadata<-data.frame(labelDescription=c("Tissue", "Time","Status","Replicate"), row.names= c("Tissue", "Time","Status","Replicate"))
pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)


# Between-arrays normalization--------------

matrizQ.g <-normalizeBetweenArrays(matriz.g,method="quantile")

jpeg("3_normalized.jpg", width=1500,height=800)
par(cex.axis=0.6)
boxplot(as.data.frame(matrizQ.g),main="Quantile normalization", col= batch.g,names=labls.g, las=3)
dev.off()


#after normalization array signal correlation
matcorN<-cor(matrizQ.g)
range(matcorN)

pdf("3_corr_heatmap_Norm.pdf", width=10,height=10)
heatmap.plus(matcorN, scale="none",col=heat.colors(40),ColSideColors= clab.g, cexCol=0.6,cexRow=0.6, main="normalized" )
dev.off()

# Creating the exprSet object--------------

eSet <- new("ExpressionSet", exprs=matrizQ.g, phenoData=pD)
eSet
ftdexp<-exprs(eSet)


#---Array clustering based on gene variability-------------------

standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}


rowMads <- apply(ftdexp, 1, mad)

#---top 1000 variable genes---

ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))

summary(ftddist2) 

ftdcl2 <- hclust(ftddist2)
#ftdcl2$labels<-labls
ftddism2<-as.matrix(ftddist2)
#rownames(ftddism2)<-labls
#colnames(ftddism2)<-labls

#---top 500 variable genes--
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))

ftdcl3 <- hclust(ftddist3)
#ftdcl3$labels<-labls
ftddism3<-as.matrix(ftddist3)
#rownames(ftddism3)<-labls
#colnames(ftddism3)<-labls


#dendrograms
jpeg("4_clst_mostVariable_dendrogram.jpg", width=1300,height=800)
par (mfrow = c(1,2))
plot(ftdcl2, xlab="", sub="", main="Top 1000 most variable genes")
plot(ftdcl3, xlab="", sub="", main="Top 500 most variable genes")
dev.off()

#heatmaps
pdf("4_clst_heatmap_mostVariable.pdf", width=12,height=12)
heatmap.plus(ftddism2, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 1000 Most Variable Genes", ColSideColors= clab.g, cexRow=0.6,cexCol=0.6, scale="none")
heatmap.plus(ftddism3, col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 500 Most Variable Genes ", ColSideColors= clab.g, cexRow=0.6,cexCol=0.6, scale="none")
dev.off()


# ************* Ratio  ************** ##
#all samples
all.samples<-as.data.frame(ftdexp)

#ratios for heatmap and ratio output
#1. Controls, each condition as a control
all.contr.n5 <-all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "5h" & Samples.g$Status== "CTRL"]
all.contrM.n5 <-rowMeans(all.contr.n5)

all.contr.n24 <-all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "24h" & Samples.g$Status== "CTRL"]
all.contrM.n24 <-rowMeans(all.contr.n24)

all.contr.n72 <-all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "72h" & Samples.g$Status== "CTRL"]
all.contrM.n72 <-rowMeans(all.contr.n72)

all.contr.s5 <-all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "5h" & Samples.g$Status== "CTRL"]
all.contrM.s5 <-rowMeans(all.contr.s5)

all.contr.s24 <-all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "24h" & Samples.g$Status== "CTRL"]
all.contrM.s24 <-rowMeans(all.contr.s24)

all.contr.s72 <-all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "72h" & Samples.g$Status== "CTRL"]
all.contrM.s72 <-rowMeans(all.contr.s72)


#2. Exp, each condition as a treatment
all.exp.n5 <- all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "5h" & Samples.g$Status== "KA"]

all.exp.n24 <- all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "24h" & Samples.g$Status== "KA"]

all.exp.n72 <- all.samples[,Samples.g$Tissue== "Nisol" & Samples.g$Time== "72h" & Samples.g$Status== "KA"]

all.exp.s5 <- all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "5h" & Samples.g$Status== "KA"]

all.exp.s24 <- all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "24h" & Samples.g$Status== "KA"]

all.exp.s72 <- all.samples[,Samples.g$Tissue== "SGN" & Samples.g$Time== "72h" & Samples.g$Status== "KA"]


#3. Ratios

all.coef.n5 <- all.exp.n5- all.contrM.n5
all.coef.n24 <- all.exp.n24- all.contrM.n24
all.coef.n72 <- all.exp.n72- all.contrM.n72

all.coef.s5 <- all.exp.s5- all.contrM.s5
all.coef.s24 <- all.exp.s24- all.contrM.s24
all.coef.s72 <- all.exp.s72- all.contrM.s72

#exporting all the data
mydata2<-cbind(rownames(all.coef.n5), all.coef.n5, all.coef.n24, all.coef.n72, all.coef.s5, all.coef.s24, all.coef.s72)

colnames(mydata2)[1]<- "Probe"


mydata3<-cbind(rownames(all.samples),all.samples)
colnames(mydata3)[1]<-"Probe"

colnames(mydata3)[2:length(mydata3)]<- paste(colnames(mydata3)[2:length(mydata3)],"exp",sep=".")

ratio.exp<-merge(mydata2,mydata3,by.x="Probe",by.y="Probe")


###########################################################
#-------------Contrast analysis ------
###########################################################


#linear fitting

TS<-paste(Samples.g$Tissue, Samples.g$Time, Samples.g$Status,sep="_")

TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)

colnames(design) <- levels(TS) 
colnames(design)

fit<- lmFit(eSet, design)
  
cont.anova <- makeContrasts(Nisol_5h_KAvsCTRL= Nisol_5h_KA - Nisol_5h_CTRL, Nisol_24h_KAvsCTRL= Nisol_24h_KA - Nisol_24h_CTRL, Nisol_72h_KAvsCTRL= Nisol_72h_KA - Nisol_72h_CTRL, SGN_5h_KAvsCTRL= SGN_5h_KA - SGN_5h_CTRL, SGN_24h_KAvsCTRL= SGN_24h_KA - SGN_24h_CTRL, SGN_72h_KAvsCTRL= SGN_72h_KA - SGN_72h_CTRL,
levels=design) 

fit2.anova<- contrasts.fit(fit, cont.anova)

#bayes
fitb<- eBayes(fit2.anova) 

#selecting the statistical cutoff

decide <- matrix(c("fdr",0.05, "fdr",0.1,"none",0.001,"none",0.005, "none", 0.01, "none", 0.05),nrow=6,ncol=2,byr=T)

# initialize:
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0

for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))

   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}

pdf("5_threshold_selection.pdf", width=13,height=6)

par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy

xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()


#chosen threshold: 

#select here the chosen paramaters
chosen.adjust<-"none"
chosen.p<-0.005
current.contrast<-"contrast"


results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))
#change p value and adjust method to get a reasonable gene list

#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))

pdf("5_selected contrast.pdf", width=10,height=10)

as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)

barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes @ p<0.005 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))

dev.off()


write.fit(fitb,file="dummy.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummy.xls",head=T)
dim(treat.de)

#output for contrasts
myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)

anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))

length(anovalist)

treat.de.anova<-treat.de[anovalist,]
dim(treat.de.anova)

fitsel.tre2<-merge(treat.de.anova, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.tre2)[1]<-"Probe"

fitsel.ratio<-merge(fitsel.tre2,ratio.exp, by.x="Probe", by.y="Probe")

myNames <-names(fitsel.ratio)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratio2<-cbind(
Probe= fitsel.ratio$Probe, 
Accession=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,coefs.col],
fitsel.ratio[,pvals.col],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,res.col],
fitsel.ratio[,ts.col],
A= fitsel.ratio$A,
fitsel.ratio[,56:112],
fitsel.ratio[,29:38],
fitsel.ratio[,41:49],
fitsel.ratio[,51:55])

dim(fitsel.ratio2)

fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]

#out.file<-paste(paste(current.contrast,chosen.adjust,chosen.p,sep="_"),"xls",sep=".")

write.xls(fitsel.ratio2,file="significant_geneList_pLess005.xls",quote=F)


pdf("6overall_anova_heatDiagram.pdf",width=18,height=10)
par(mfrow=c(1,1))
par(mar=c(2,3,3,3))
par(oma=c(2,2,3,2))

for (k in 1:1){
heatDiagram(results,fitb$coef, primary=k, cex=0.6, orientation="portrait", low="green",high="red", ncolors=123, mar=c(1.5,1.5,4.5,3.5))
}
dev.off()

pdf("6_hist_pvalue.pdf", height=10,width=18)
par(mfrow=c(2,3))
for (k in 1:6){
hist(fitb$p.value[,k], main=colnames(fitb$p.value)[k],xlab="p.value-distribution", br=80,col="skyblue")
}
dev.off()


#Venn

sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep="-")

pdf("6_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))

vennDiagram(results[,c(1,2,3)],names=c(v[1],v[2],v[3]),main="Nisol, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,2,3)],names=c(v[1],v[2],v[3]),main="Nisol, p<0.005", cex=1)

vennDiagram(results[,c(4,5,6)],names=c(v[4],v[5],v[6]),main="SGN, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(4,5,6)],names=c(v[4],v[5],v[6]),main="SGN, p<0.005", cex=1)

vennDiagram(results[,c(1,4)],names=c(v[1],v[4]),main="5h, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(1,4)],names=c(v[1],v[4]),main="5h, p<0.005", cex=1)

vennDiagram(results[,c(2,5)],names=c(v[2],v[5]),main="24h, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(2,5)],names=c(v[2],v[5]),main="24h, p<0.005", cex=1)

vennDiagram(results[,c(3,6)],names=c(v[3],v[6]),main="72h, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=1)
vennDiagram(results[,c(3,6)],names=c(v[3],v[6]),main="72h, p<0.005", cex=1)

dev.off()


#heatmap 

toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),c(32:50)]

#colnames(toplot)<-c("P1vsC_1", "P1vsC_2", "P1vsC_3", "P1vsC_4", "P2vsC_1", "P2vsC_2", "P2vsC_3", "P2vsC_4")
#toplot1000<-toplot[1:1000,]

col.toUse<-as.character(c(rep("tan",4), rep("blue",2), rep("yellow",3), rep("purple",4), rep("pink",3), rep("gold4",3)))

pdf("7_anova_heatmap.pdf", height=10,width=10)
heatmap.2(as.matrix(toplot), col=rev(redgreen(48)), main="p<0.005, KA vs. CTRL", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors=col.toUse, cexCol=0.6,keysize=1)
heatmap.2(as.matrix(toplot[,1:9]), col=rev(redgreen(48)), main="Nisol, p<0.005, KA vs. CTRL", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors=col.toUse[1:9], cexCol=0.6,keysize=1)
heatmap.2(as.matrix(toplot[,10:19]), col=rev(redgreen(48)), main="SGN, p<0.005, KA vs. CTRL", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), ColSideColors=col.toUse[10:19], cexCol=0.6,keysize=1)
dev.off()

#complete list of genes

fitsel.treAll<-merge(treat.de, annot, by.x="ID",by.y="Probe_Id")  
colnames(fitsel.treAll)[1]<-"Probe"

fitsel.ratioAll<-merge(fitsel.treAll,ratio.exp)

myNames <-names(fitsel.ratioAll)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)

fitsel.ratioN<-cbind(
Probe= fitsel.ratioAll$Probe, 
Accession=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,coefs.col],
fitsel.ratioAll[,pvals.col],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,res.col],
fitsel.ratioAll[,ts.col],
A= fitsel.ratioAll$A,
fitsel.ratioAll[,56:112],
fitsel.ratioAll[,29:38],
fitsel.ratioAll[,41:49],
fitsel.ratioAll[,51:55])

fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
write.xls(fitsel.ratioN, "complete_genelist.xls" ,quote=F)
