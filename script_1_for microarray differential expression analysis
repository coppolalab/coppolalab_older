##this is for analyssi of project 2011-063, microarray
Giovanni Coppola Laboratory, UCLA
 
# Loading packages--
library (Biobase)
library(marray)
library (limma)
library(RColorBrewer)
library(MASS)
library(gplots)
 
# setting the work directories---
setwd("F:/Study/Carmen_Bertoni")
 
# reading in phenodata 
targets<-read.delim(file="targets.txt", header=T)
labls<- paste(targets$SampleID, targets$Condition, sep="_")
phD <- targets[,c(5,6)]
rownames(phD)<-labls
metadata<-data.frame(labelDescription=c("SampleID","Condition"), row.names= c("SampleID","Condition"))
pD<-new("AnnotatedDataFrame",data=phD, varMetadata=metadata)
 
###reading the dataset 
illumina<- read.delim (file="2011-063 sample probe profile.txt", header=TRUE)
rownames(illumina)<-illumina$PROBE_ID
dim(illumina)
 
#signal
illumina<-illumina[,c(3:66)]
nsampl<-16 
colnames(illumina)[seq(1,(nsampl*4),4)]
mydata<-illumina[,seq(1,(nsampl*4),4)]
mydata<-mydata[,c(9:16,1:8)] 
colnames(mydata)<-labls
 
#detction scores p-value
colnames(illumina)[seq(1,(nsampl*4),4)+1]
detsco.p<-illumina[,seq(1,(nsampl*4),4)+1]
detsco.p <- detsco.p[,c(9:16,1:8)]
detsco<-1-detsco.p
colnames(detsco)<-labls
 
#getting the sds
colnames(illumina)[seq(1,(nsampl*4),4)+2]
sds<-illumina[,seq(1,(nsampl*4),4)+2]
sds <- sds [,c(9:16,1:8)]
colnames(sds)<-labls
 
#getting the bead no
colnames(illumina)[seq(1,(nsampl*4),4)+3]
beads<-illumina[,seq(1,(nsampl*4),4)+3]
beads <- beads [,c(9:16,1:8)]
 
mydata.notlog<-mydata
mydata=log2(mydata)
matriz <- as.matrix(mydata)
colnames(mydata)<-labls
colnames(detsco)<-labls
colnames(sds)<-labls
dim(mydata)
 
# loading annotation
annot <- read.csv(file="MouseRef-8_V2_0_R0_11278551_A.csv", header=T)
dim(annot)
 
# signal plots-
nsampl=16
condition<-as.vector(targets$Condition)
condition[targets$Condition=="DMSO"]<-"grey"
condition[targets$Condition=="PTC_10"]<-"blue"
condition[targets$Condition=="PTC_30"]<-"navy"
condition[targets$Condition=="RTC_10"]<-"lightgreen"
condition[targets$Condition=="RTC_30"]<-"darkmagenta"
 
batch<-ifelse(targets$Batch==1, "lightblue","lightpink")
 
jpeg("1_signal.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(as.data.frame(matriz),main="Signal Not normalized",col=batch, names=labls, las=3)
dev.off()
 
jpeg("1_detsco.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(as.data.frame(detsco),main="Detection scores",names=labls, col=batch,las=3)
abline(h=0.8, col="red")
abline(h=0.9, col="blue")
dev.off()
 
#set the thresholds here
thresholds<-c(0.99,0.98,0.97,0.96)
pdf("1-detsco_stats.pdf",height=9,width=18)
par (mfrow = c(2,2))
for (thr in thresholds) {
apply(detsco,2,function(x)length(which(x>thr)))->detsco.table
grn<-detsco.table/nrow(mydata)
col<-batch
#col<-as.character(as.numeric(Samples$strain))
grn.m<-mean(grn)
grn.sd<- sd(grn)
sd1p<-grn.m+(grn.sd)
sd1m<-grn.m-(grn.sd)
sd2p<-grn.m+(grn.sd*2)
sd2m<-grn.m-(grn.sd*2)
sd3p<-grn.m+(grn.sd*3)
sd3m<-grn.m-(grn.sd*3)
par(cex.axis=0.6)
plot(x=1:nsampl,y=grn,col=col,pch=19,xaxt="n",main=paste("Detection Threshold = ",thr,sep=""),xlab="",ylab=paste("Fraction Detected at ",thr,sep=""))
axis(1,at=1:nsampl,labels=names(grn),las=3)
#legend(x="topright",fill=unique(col),as.character(unique(Samples$Genotype[order(Samples$Genotype)])),cex=0.9,bty="n")
abline(sd1p,0,lty=2,col=1)
abline(sd1m,0,lty=2, col=1)
abline(sd2p,0,lty=2,col=3)
abline(sd2m,0,lty=2, col=3)
abline(sd3p,0,lty=2, lwd=2,col=2)
abline(sd3m,0,lty=2,lwd=2,col=2)
text(sd1m,"1SD",pos=1)
text(sd3m,"3SD",pos=1)
text(sd2m,"2SD",pos=1)
}
dev.off()
 
#histogram
probes99<-apply(detsco,1,function(x)length(which(x>=0.99)))
pdf("1-detsco_hist.pdf",height=10,width=10)
hist(probes99,br=nsampl,col="blue", main="Distribution of present genes")
axis(side=4,at= length(probes99)*seq(0,0.5,0.1),labels= seq(0,50,10))
dev.off()
 
jpeg("1_sds.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(log2(as.data.frame(sds)),main="Bead SD (log scale)",names=labls, las=3)
#bead standard deviation (log2)
dev.off()
 
jpeg("1_signal_detsco.jpg", width=1300,height=1000)
par (mfrow = c(4,4))
for(k in 1:nsampl)
plot(x=matriz[,k], y=detsco[,k],cex=0.4, main=labls[k],xlab="log2 signal",ylab="Detection score")
#detection score vs. log2 signal 
dev.off()
 
# signal correlation plots [before normalization]-
matcor<-cor(mydata)
range(as.vector (matcor))
library(heatmap.plus)
clab=cbind(condition, batch)
 
pdf("2_corr_heatmap_notNorm.pdf", width=10,height=10)
heatmap.plus(matcor, scale="none",col=heat.colors(40), ColSideColors=clab, cexCol=0.6,cexRow=0.6, main="Clustering Based on Inter-Array Pearson Coefficient, Not normalized" )
dev.off()
 
# check outliers 
pdf("2_AIC.pdf", width=13,height=10)
IAC=cor(matriz,use="p")
cluster1=hclust(as.dist(1-IAC))
plot(cluster1, main=paste("All samples (no=",dim(IAC)[2],")"))
dev.off()
 
meanIAC=apply(IAC,2,mean)
sdCorr=sd(meanIAC)
numbersd=(meanIAC-mean(meanIAC))/sdCorr
y=length(IAC[1,])
x=(mean(IAC)*(y^2)-y)/((y^2)-y)
 
pdf("2_sd.pdf",width=12,height=12)
plot(numbersd, type="n", main="all samples", ylab="z-score") 
text(numbersd, labels=labls, cex=0.6,col="red")
#abline(h=-2, col=4)
abline(h=-3, col=5)
dev.off()
 
 
# Between-arrays normalization
matriz<-as.matrix(mydata)
matrizQ <-normalizeBetweenArrays(as.matrix(matriz),method="quantile")
 
jpeg("3_normalized.jpg", width=1300,height=800)
par(cex.axis=0.7)
boxplot(as.data.frame(matrizQ),main="Quantile normalization", col= batch,names=labls, las=3)
dev.off()
 
 
#after normalization array signal correlation
matcorN<-cor(matrizQ)
range(matcorN) 
 
pdf("3_corr_heatmap_Norm.pdf", width=10,height=10)
heatmap.plus(matcorN,scale="none",col=heat.colors(40), ColSideColors=clab, cexCol=0.6,cexRow=0.6, main="normalized")
dev.off()
 
# Creating the exprSet object-
eSet <- new("ExpressionSet", exprs=matrizQ, phenoData=pD)
eSet
ftdexp<-exprs(eSet)
 
 
#Array clustering based on gene variability--
standardize <- function(z) {
  rowmed <- apply(z, 1, median)
  rowmad <- apply(z, 1, mad)
  rv <- sweep(z, 1, rowmed)
  rv <- sweep(rv, 1, rowmad, "/")
  return(rv)
}
rowMads <- apply(ftdexp, 1, mad)
 
#top 1000 variable genes
ord <- order(rowMads,decreasing=TRUE)
top1000 <- ord[1:1000]
ftdexp2 <- ftdexp[top1000, ]
ftddist2 <- dist(t(standardize(ftdexp2)))
ftdcl2 <- hclust(ftddist2)
ftddism2<-as.matrix(ftddist2)
 
#top 500 variable genes-
top500 <- ord[1:500]
ftdexp3 <- ftdexp[top500, ]
ftddist3 <- dist(t(standardize(ftdexp3)))
ftdcl3 <- hclust(ftddist3)
ftddism3<-as.matrix(ftddist3)
 
#dendrograms
jpeg("4_clst_mostVariable_dendrogram.jpg", width=1300,height=800)
par (mfrow = c(1,2))
plot(ftdcl2, xlab="", sub="", main="Top 1000 most variable genes")
plot(ftdcl3, xlab="", sub="", main="Top 500 most variable genes")
dev.off()
 
#heatmaps
pdf("4_clst_heatmap_mostVariable.pdf", width=10,height=10)
heatmap.plus(ftddism2, scale="none",col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 1000 Most Variable Genes", ColSideColors= clab, cexRow=0.6,cexCol=0.6,keysize=1)
heatmap.plus(ftddism3, scale="none",col=rev(heat.colors(75)), distfun=function(x) as.dist(x), main="Clustering Based on the Top 500 Most Variable Genes", ColSideColors= clab, cexRow=0.6,cexCol=0.6,keysize=1)
dev.off()
 
 
# Ratio for heatmap
all.samples<-as.data.frame(ftdexp)
 
#ratios for heatmap and ratio output
#1. Controls, each condition as a control
all.contr<-all.samples[,targets$Condition== "DMSO"]
all.contrM<- rowMeans(all.contr)
 
#2. Exp, each condition as a treatment
all.exp.ptc10 <- all.samples[,targets$Condition== "PTC_10"]
all.exp.ptc30 <- all.samples[,targets$Condition== "PTC_30"]
all.exp.rtc10 <- all.samples[,targets$Condition== "RTC_10"]
all.exp.rtc30 <- all.samples[,targets$Condition== "RTC_30"]
 
#3. Ratios
all.coef.ptc10 <- all.exp.ptc10 - all.contrM
all.coef.ptc30 <- all.exp.ptc30 - all.contrM
all.coef.rtc10 <- all.exp.rtc10 - all.contrM
all.coef.rtc30 <- all.exp.rtc30 - all.contrM
 
#exporting all the data
mydata2<-cbind(rownames(all.coef.ptc10), all.coef.ptc10, all.coef.ptc30, all.coef.rtc10, all.coef.rtc30)
colnames(mydata2)[1]<- "Probe"
mydata3<-cbind(rownames(all.samples),all.samples)
colnames(mydata3)[1]<- "Probe"
colnames(mydata3)[2:length(mydata3)]<- paste(colnames(mydata3)[2:length(mydata3)],"expr",sep=".")
ratio.exp<-merge(mydata2,mydata3,by.x="Probe",by.y="Probe")
 
#-Contrast analysis
TS<- targets$Condition
TS <- factor(TS, levels=unique(TS)) 
design <- model.matrix(~0+TS)
colnames(design) <- levels(TS) 
colnames(design)
 
fit<- lmFit(eSet, design)
cont.anova <- makeContrasts(PTC.10_vs_DMSO= PTC_10 - DMSO,
                            PTC.30_vs_DMSO= PTC_30 - DMSO,
                            RTC.10_vs_DMSO= RTC_10 - DMSO,
			    RTC.30_vs_DMSO= RTC_30 - DMSO,
			    levels=design) 
fit2.anova<- contrasts.fit(fit, cont.anova)
fitb<- eBayes(fit2.anova) 
 
#selecting the statistical cutoff
decide <- matrix(c("fdr",0.05, "fdr",0.1,"none",0.001,"none",0.005, "none", 0.01),nrow=5,ncol=2,byr=T)
mysum <- as.list(1:nrow(decide))
mynum <- 0
maxmax <- 0
for (test in 1:nrow(decide)){
    results<-decideTests(fitb, adjust.method=decide[test,1],p=as.numeric(decide[test,2]))
   summary(results) -> mysum[[test]]
   mynum[test] <-length(which(apply(results,1,function(x)any(x,na.rm=T))))
   maxmax <- max(c(maxmax, as.vector(mysum[[test]][c(1,3),])))
}
 
pdf("5_threshold_selection.pdf", width=13,height=6)
par(mfrow=c(1,nrow(decide)))
for (test in 1:nrow(decide))
{
as.numeric(as.vector(mysum[[test]][3,]))->plotMe1
as.numeric(as.vector(mysum[[test]][1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)
barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax),
main=paste("Gene Changes \np<",decide[test,2], ", " , decide[test,1],
" (" ,mynum[test] ,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum[[test]]))
text(xx,yy,colnames(mysum[[test]]))
text((plotMe1+10)*0 + .9*maxData,yy+0.1,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxData2,yy+0.1,format(plotMe2,digits=3))
}
dev.off()
 
 
#chosen threshold: 
#select here the chosen paramaters
chosen.adjust<-"none"
chosen.p<-0.005
current.contrast<-"contrast"
results<-decideTests(fitb,adjust.method=chosen.adjust,p=as.numeric(chosen.p))
 
#plotting the selected threshold for the selected contrasts
summary(results)->mysum05
mysum05_no<-length(which(apply(results,1,function(x)any(x,na.rm=T))))
maxmax<-max(as.vector(mysum05[c(1,3),]))
 
pdf("5_selected contrast.pdf", width=10,height=10)
as.numeric(as.vector(mysum05[3,]))->plotMe1
as.numeric(as.vector(mysum05[1,]))->plotMe2
maxData = max(plotMe1)
maxData2 = max(plotMe2)
barplot(plotMe1,horiz=T,col="red",xlim=c(-maxmax,maxmax), main=paste("Gene Changes, p<0.005 (",mysum05_no,")",sep=""))->yy
barplot(-plotMe2,horiz=T,col="green",add=T)->yy
xx<-vector("integer",ncol(mysum05))
text(xx,yy,colnames(mysum05))
text((plotMe1+10)*0 + .9*maxmax,yy,format(plotMe1,digits=3))
text((-plotMe2-10)*0 - .9*maxmax,yy,format(plotMe2,digits=3))
dev.off()
 
write.fit(fitb,file="dummya.xls",adjust=chosen.adjust,results=results)
treat.de<-read.table(file="dummya.xls",head=T)
dim(treat.de)
 
#output for contrasts
myNames<-names(treat.de)
res.col<- which(regexpr("Res.",myNames)>0)
anovalist<- which(apply(treat.de[,res.col],1,function(x)any(x,na.rm=T)))
length(anovalist)
 
treat.de.anova<-treat.de[anovalist,]
fitsel.tre2<-merge(treat.de.anova, annot, by.x="ID",by.y="Probe_Id") 
colnames(fitsel.tre2)[1]<-"Probe"
dim(fitsel.tre2)
 
fitsel.ratio<-merge(fitsel.tre2,ratio.exp, by.x="Probe", by.y="Probe")
myNames <-names(fitsel.ratio)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)
 
fitsel.ratio2<-cbind(
Probe= fitsel.ratio$Probe, 
Accession=fitsel.ratio$Accession, 
Symbol=fitsel.ratio$Symbol, 
Definition=fitsel.ratio$Definition,
fitsel.ratio[,coefs.col],
fitsel.ratio[,pvals.col],
F=fitsel.ratio$F,
F.p.value=fitsel.ratio$F.p.value,
fitsel.ratio[,res.col],
fitsel.ratio[,ts.col],
A= fitsel.ratio$A,
fitsel.ratio[,48:76],
fitsel.ratio[,21:47])
dim(fitsel.ratio2)
 
fitsel.ratio2<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),]
write.xls(fitsel.ratio2,file="significant_geneList_pLess005.xls",quote=F)
 
##p-value distribution
pdf("6_hist_pvalue.pdf", height=10,width=13)
par(mfrow=c(2,2))
for (k in 1:4){
hist(fitb$p.value[,k], main=colnames(fitb$p.value)[k],xlab="p.value-distribution", br=80,col="skyblue")
}
dev.off()
 
 
#Venn
sumV <- apply(summary(results),2,function(x) x[1]+x[3])
v <- paste(names(sumV),sumV,sep="-")
pdf("6_venn.pdf", width=21,height=10)
par(mfrow=c(1,2))
vennDiagram(results[,c(1,2)],names=c(v[1],v[2]),main="PTC vs. DMSO, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=0.8)
vennDiagram(results[,c(1,2)],names=c(v[1],v[2]), main="PTC vs. DMSO, p<0.005", cex=0.8)
vennDiagram(results[,c(3,4)],names=c(v[3],v[4]),main="RTC vs. DMSO, p<0.005", include=c("up","down"),counts.col=c(2,3), cex=0.8)
vennDiagram(results[,c(3,4)],names=c(v[3],v[4]), main="RTC vs. DMSO, p<0.005", cex=0.8)
dev.off()
 
#heatmap 
toplot<-fitsel.ratio2[order(fitsel.ratio2$F,decreasing=T),c(24:36)]
col.toUse<-as.character(c(rep("blue",3), rep("pink",3),rep("grey",3), rep("cyan",4)))
pdf("7_anova_heatmap.pdf", height=10,width=10)
heatmap.2(as.matrix(toplot), col=rev(redgreen(48)), main="p<0.005 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), cexCol=0.6, ColSideColors=col.toUse,labRow="",keysize=0.9)
heatmap.2(as.matrix(toplot), col=rev(redgreen(48)), main=" p<0.005 ", trace="none", breaks=(c(-3,-2.5,-2,-1.5,seq(-1,1,0.05),1.5,2,2.5,3)), cexCol=0.6, ColSideColors=col.toUse,labRow="",keysize=0.9, dendrogram = "row", Colv=FALSE)
dev.off()
 
 
#complete list of genes
fitsel.treAll<-merge(treat.de, annot, by.x="ID",by.y="Probe_Id")  
colnames(fitsel.treAll)[1]<-"Probe"
fitsel.ratioAll<-merge(fitsel.treAll,ratio.exp)
 
myNames <-names(fitsel.ratioAll)
#selects the relevant columns for output
res.col<- which(regexpr("Res.",myNames)>0)
coefs.col <- which(regexpr("Coef.",myNames)>0)
ts.col<- coefs.col+length(coefs.col)
pvals.col <- which(regexpr("p.value.",myNames)>0) 
endcolumns.start<-length(fitsel.ratio)-(length(mydata2)-2)
endcolumns.end<-length(fitsel.ratio)
 
fitsel.ratioN<-cbind(
Probe= fitsel.ratioAll$Probe, 
Accession=fitsel.ratioAll$Accession, 
Symbol=fitsel.ratioAll$Symbol, 
Definition=fitsel.ratioAll$Definition,
fitsel.ratioAll[,coefs.col],
fitsel.ratioAll[,pvals.col],
F=fitsel.ratioAll$F,
F.p.value=fitsel.ratioAll$F.p.value,
fitsel.ratioAll[,res.col],
fitsel.ratioAll[,ts.col],
A= fitsel.ratioAll$A,
fitsel.ratioAll[,48:76],
fitsel.ratioAll[,21:47])
 
fitsel.ratioN<-fitsel.ratioN[order(fitsel.ratioN$F,decreasing=T),]
write.xls(fitsel.ratioN, "complete_genelist.xls" ,quote=F)
